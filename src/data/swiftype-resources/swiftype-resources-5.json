{
  "/docs/agents/python-agent/back-end-services/python-agent-celery": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.36204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " framework, or <em>back</em>-<em>end</em> <em>services</em>. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The <em>Python</em> <em>agent</em> does not support Windows environments. <em>Python</em> <em>Python</em> (CPython"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.79573,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "<em>Back</em>-<em>end</em> <em>services</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ", controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. <em>Back</em>-<em>end</em> <em>services</em> gearman Timing of task execution performed in a gearman worker recorded as background tasks"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.77472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " Sets the name of the audit log file. If set, the <em>agent</em> logs details of messages passed <em>back</em> and forth between the monitored process and the collector. This allows you to evaluate the security of the <em>Python</em> <em>agent</em>. Use an absolute path unless you are sure what your app&#x27;s working directory"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/configuration/python-agent-configuration": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.723114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-10-01T11:43:48Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.22606,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> attributes",
        "sections": "<em>Python</em> <em>agent</em> attributes",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>configuration</em> settings, see Enabling and disabling attributes. For more help Additional documentation resources include: <em>Agent</em> attributes (types, destinations, and limits for attributes used by our <em>agents</em>) Enabling and disabling attributes (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> attributes) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> attributes)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "Language agents and distributed tracing",
        "Tip",
        "Quick start for standard distributed tracing (recommended):",
        "Step 1. Identify services",
        "Step 2. Instrument each service with an APM agent",
        "Step 3. View traces",
        "View traces that include a specific service",
        "View traces across accounts",
        "Set up Infinite Tracing (advanced option)",
        "Step 1. Complete the instrumentation for standard distributed tracing in the quick start above",
        "Step 2. Set up the trace observer",
        "Step 3: Configure the agent for Infinite Tracing",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Step 4. (Optional) Customize Infinite Tracing",
        "Options for older APM agents",
        "Compatibility guide",
        "Important",
        "Configure standard distributed tracing for your older agents",
        "Manual instrumentation (If automatic instrumentation doesn't work)",
        "Instrument the calling service",
        "Instrument the called service"
      ],
      "title": "Language agents and distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "b87eacf981bfae09990c95604ba3b7fc19741a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/language-agents-enable-distributed-tracing/",
      "published_at": "2021-10-01T10:19:31Z",
      "updated_at": "2021-09-14T09:14:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has APM language agents for C, Go, Java, Node.js, .NET, PHP, Python, and Ruby. Each of these offers several ways to leverage the power of distributed tracing: Quick start for standard distributed tracing (recommended): A fast way to get started Infinite Tracing: An advanced alternative to standard distributed tracing Older APM agents: Tracing options if you have older APM agents Manual instrumentation: Tips if automatic instrumentation doesn't work Tip If you want to get more background before getting started, check out these topics: How span sampling works explains distributed tracing options. Impacts to APM tells you what to expect if you are a current APM user but haven't set up distributed tracing. Quick start for standard distributed tracing (recommended): This is the best approach to set up standard distributed tracing if you haven't installed any APM agents for your services yet, or if you want to instrument additional services. Tip You'll need a New Relic account to set up distributed tracing. If you don't already have one, you can quickly create a free account. Step 1. Identify services Figure out which services you want to instrument so they each send trace data to New Relic. Step 2. Instrument each service with an APM agent We have installation assistants for a variety of languages to help you instrument each service. You should run the installation assistant for each service you want to instrument to ensure that each installation has a unique application name. To start the assistant, click the link for your language: APM: C APM: Golang APM: Java APM: .NET APM: Node.js APM: PHP APM: Python APM: Ruby Tip This quick-start approach with the installation assistant automatically enables distributed tracing for each service you run it on, but if you already have a APM agent that you want to participate in distributed tracing, you'll need to manually enable distributed tracing. See Options for older APM agents. Step 3. View traces After you instrument each of your services with APM agents, generate some traffic in your application so we can capture some traces. Here are two ways to view your traces in the UI: View traces that include a specific service Here's one way you can see traces for a particular service: Go to one.newrelic.com. Click APM in the top menu bar. Click your service. In the left navigation's Monitor section, click Distributed tracing. If you don't see the traces you want, you can filter by the trace.id. View traces across accounts This option allows you to search all traces across all New Relic accounts in your organization that you have access to. Go to one.newrelic.com. Click Browse data in the top menu bar, and then click Traces. Select your entity in the left pane. If you don't see the traces you want, you can filter by the trace.id. For more help finding your traces in the UI: Understand and use the distributed tracing UI Query distributed trace data Set up Infinite Tracing (advanced option) Standard distributed tracing for APM agents (above) captures up to 10% of your traces, but if you want us to analyze all your data and find the most relevant traces, you can set up Infinite Tracing. This alternative to standard distributed tracing is available for all APM language agents except C SDK. Tip To learn more about this feature, see Infinite Tracing. Before beginning, first ensure you meet the requirements. Step 1. Complete the instrumentation for standard distributed tracing in the quick start above The Infinite Tracing setup builds on the instrumentation step from the Quick start for standard distributed tracing. Step 2. Set up the trace observer The trace observer is a New Relic AWS-based service that collects and analyzes all your traces. Follow the instructions in Set up trace observer. When you're done, return here with your trace observer information and continue with the next step to configure the agent. Step 3: Configure the agent for Infinite Tracing Infinite Tracing configuration settings include the standard distributed tracing plus information about the trace observer. Find the settings for your language agent below: C SDK Infinite tracing is not available for C SDK. Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Infinite Tracing Configuration options: newrelic.Config structure: app, err := newrelic.NewApplication( newrelic.ConfigAppName(YOUR_APP_NAME), newrelic.ConfigLicense(YOUR_LICENSE_KEY), func(cfg *newrelic.Config) { cfg.DistributedTracer.Enabled = true cfg.InfiniteTracing.TraceObserver.Host = YOUR_TRACE_OBSERVER_HOST }, ) Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=YOUR_TRACE_OBSERVER_HOST Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } infinite_tracing: { trace_observer: { host: 'YOUR_TRACE_OBSERVER_HOST' } } Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Infinite Tracing Pull down the libraries with this installation command, and then set up the configuration file or environment variables: pip install newrelic[infinite-tracing] Copy Configuration options: Configuration file (newrelic.ini): distributed_tracing.enabled = true infinite_tracing.trace_observer_host= YOUR_TRACE_OBSERVER_HOST Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. To set up Infinite Tracing, you need to install the Infinite Tracing gem. The gem is available in rubygems.org. For applications using Bundler, additionally include the Infinite Tracing gem in the Gemfile: gem 'newrelic-infinite_tracing' Copy If you're using Rails 3 or higher, or Rails 2.3 in the recommended configuration, Rails will automatically call Bundler.require and cause newrelic-infinite_tracing to be required during startup of your application. If you're using Sinatra or another framework, you must manually call require 'newrelic/infinite_tracing' or manually call Bundler.require. Type Required configuration Infinite Tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: 'YOUR_TRACE_OBSERVER_HOST' Copy Environment variables: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy Step 4. (Optional) Customize Infinite Tracing After you add the agent configuration settings, you should start seeing data in the New Relic UI. After you spend some time analyzing your data, you may want to adjust some of the features of Infinite Tracing: Configure trace observer monitoring Configure span attribute trace filter Configure random trace filter Options for older APM agents If you have older APM agents, use this section to figure out if the distributed tracing features you want are supported. Following the compatibility information is a section showing the basic configuration settings to turn on standard distributed tracing. If your older agent supports Infinite Tracing and you want to set it up, see the steps above. Compatibility guide Find your language agents below to confirm if you can use your existing agents with distributed tracing: C SDK Install (compile) or update to the required C SDK version. For best results, update to the latest C SDK version. Option C SDK version Standard distributed tracing 1.1.0 or higher (W3C Trace Context not available) Infinite Tracing Not available Go Install or update to the required Go agent version. For best results, update to the latest Go agent version. Option Go agent version Standard distributed tracing 2.1.0 or higher With W3C Trace Context: 3.1.0 or higher Infinite Tracing v3.5.0 (includes W3C Trace Context) Supported environments: Go 1.9 or higher Java Install or update to the required Java agent version. For best results, update to the latest Java agent version. Important Your JVM's networkaddress.cache.ttl security setting must not be set to forever (i.e. -1). For more information about this networking property, please visit the Oracle Network Properties docs. Type Java agent version Standard distributed tracing 4.3.0 or higher With W3C Trace Context: 5.10 or higher Infinite Tracing 5.12.1 or higher (includes W3C Trace Context) Supported environments: Java 8: Update 252 or higher All versions of Java 9 or higher Tip For special considerations, see Infinite Tracing: Configuring SSL for Java 7 and 8. .NET Install or update to the required .NET agent version. For best results, update to the latest .NET agent version. Option .NET agent version Standard distributed tracing 8.6.45.0 or higher With W3C Trace Context: 8.27.139.0 or higher Infinite Tracing 8.30.0 (includes W3C Trace Context) Supported environments: .NET Framework 4.5 or higher .NET Core 2.0 or higher Node.js Install or update to the required Node.js agent version. For best results, update to the latest Node.js agent version. Option Node.js agent version Standard distributed tracing 4.7.0 or higher With W3C Trace Context: 6.4 or higher Infinite Tracing 7.3.0 (includes W3C Trace Context) Supported environments: Node version 10.10.0 or higher PHP Install or update to the required PHP agent version. For best results, update to the latest PHP agent version. Option PHP agent version Standard distributed tracing 8.4 or higher With W3C Trace Context: 9.8 or higher Infinite Tracing 9.12.0.268 or higher Python Install or update to the required Python agent version. For best results, update to the latest Python agent version. Option Python agent version Standard distributed tracing 4.2.0.100 or higher With W3C Trace Context: 5.6 or higher Infinite Tracing 5.12.0.140 (includes W3C Trace Context) Supported environments: CPython only (pypy is unsupported) Ruby Install or update to the required Ruby agent version. For Infinite Tracing, you also need to install the Infinite Tracing gem. For best results, update to the latest Ruby agent version and Infinite Tracing gem version, if applicable. Option Ruby agent version Standard distributed tracing newrelic_rpm 5.3.0.346 or higher With W3C Trace Context: newrelic_rpm 6.9 or higher Infinite Tracing newrelic_rpm 7.0.0 or higher (includes W3C Trace Context) newrelic-infinite_tracing 7.0.0 or higher Supported environments: Ruby 2.5 or higher Configure standard distributed tracing for your older agents Distributed tracing is enabled through configuration settings. Review the following agent-specific sections. For general help with agent configurations, see Configure the agent. Important Server-side configuration is not available for Infinite Tracing. C SDK Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your C applications. Type Required configuration Standard distributed tracing Configuration options: newrelic_app_config_t structure: newrelic_app_config_t* config; config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Go Here's an overview of the settings. For more help with configuration, see Enable distributed tracing for your Go applications. Type Required configuration Standard distributed tracing Configuration options: ConfigOption structure: newrelic.NewApplication( newrelic.ConfigAppName(\"Example App\"), newrelic.ConfigLicense(os.Getenv(\"NEW_RELIC_LICENSE_KEY\")), newrelic.ConfigDistributedTracerEnabled(true), ) Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Java Here's an overview of the settings. For more help with configuration, see Java agent configuration: Config file. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Infinite Tracing Configuration options: Configuration file (newrelic.yml) (indented 2 spaces under the common stanza): distributed_tracing: enabled: true infinite_tracing: trace_observer: host: \"YOUR_TRACE_OBSERVER_HOST\" Copy Java system property: -Dnewrelic.config.distributed_tracing.enabled=true -Dnewrelic.config.infinite_tracing.trace_observer.host=\"YOUR_TRACE_OBSERVER_HOST\" Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST=\"YOUR_TRACE_OBSERVER_HOST\" Copy .NET Here's an overview of the settings. For more help with configuration, see .NET agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.config): <configuration . . . > <distributedTracing enabled=\"true\" /> </configuration> Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Node.js Here's an overview of the settings. For more help with configuration, see Node.js agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.js): distributed_tracing: { enabled: true } Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy PHP Here's an overview of the settings. For more help with configuration, see Distributed tracing for the PHP agent Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.ini): newrelic.distributed_tracing_enabled = true Copy Python Here's an overview of the settings. For more help with configuration, see Python agent configuration Type Required configuration Standard distributed tracing Configuration file (newrelic.ini): distributed_tracing.enabled = true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Ruby Here's an overview of the settings. For more help with configuration, see Ruby agent configuration. Type Required configuration Standard distributed tracing Configuration options: Configuration file (newrelic.yml): distributed_tracing: enabled: true Copy Environment variable: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy Tip If you need help with proxy configuration, see Proxy support. Manual instrumentation (If automatic instrumentation doesn't work) Recommendation: Before performing any custom instrumentation, read: How distributed tracing works Troubleshoot missing data If a service is not passing the trace header to other services, you can use the distributed tracing payload APIs to instrument the calling service and the called service. The calling service uses an API call to generate a payload, which is accepted by the called service. Instrument the calling service To instrument the calling service: Ensure the version of the APM agent that monitors the calling service supports distributed tracing. Invoke the agent API call for generating a distributed trace payload: C SDK | Go | Java | .NET | Node.js | PHP | Python | Ruby. Important To maintain proper ordering of spans in a trace, ensure you generate the payload in the context of the span that sends it. Add that payload to the call made to the destination service (for example, in a header). (Optional) Identify the call as an external call: C SDK Go Java .NET: n/a Node.js PHP: n/a Python Ruby Instrument the called service To instrument the called service: Ensure the version of the APM agent that monitors the called service supports distributed tracing. If the New Relic agent on the called service does not identify a New Relic transaction, use the agent API to declare a transaction: C SDK One way to tell that a transaction is not in progress: when newrelic_create_distributed_trace_payload() is called, a NULL pointer is returned. To solve this problem, follow the procedures to create a transaction with the C SDK. Go One way to tell that a transaction is not in progress: when Transaction.InsertDistributedTraceHeaders(h http.Header) is called, no headers are inserted. To create a transaction, see Instrument Go transactions. Java One way to tell that a transaction is not in progress: when Transaction.insertDistributedTraceHeaders(Headers) is called, no headers are inserted (this API requires agent 6.4.0+). To create a transaction, see Java agent transaction-related APIs. .NET One way to tell that a transaction is not in progress: CreateDistributedTracePayload() returns an empty payload. To create a transaction, see Introduction to .NET custom instrumentation. Node.js One way to tell that a transaction is not in progress: the Node.js agent logs will report an error similar to this: No transaction found when calling Transaction.acceptDistributedTracePayload. Copy Use startWebTransaction to create a web transaction or startBackgroundTransaction to capture a non-web transaction. PHP One way to tell that a transaction is not in progress: newrelic_insert_distributed_trace_headers() returns false. To create a transaction, see newrelic_start_transaction. Python To tell that a transaction is not in progress: when transaction = current_transaction() is run, transaction is None. Or, if result = accept_distributed_trace_payload(payload) is run, then the result is False. Use background_task to report a non-web transaction. For more on Python instrumentation, see Monitor transactions and segments. Ruby If you are using a Rack-based web framework and have enabled New Relic's Rack instrumentation, the Ruby agent will handle starting a transaction for you. For other use cases, see the add_transaction_tracer API method. Extract the payload from the call that you received (for example, in a header). Invoke the call for accepting the payload: C SDK | Go | Java | .NET | PHP | Node.js | Python | Ruby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.101555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Language <em>agents</em> and distributed tracing",
        "sections": "<em>Configure</em> standard distributed tracing for your older <em>agents</em>",
        "tags": "Enable and <em>configure</em>",
        "body": " for the PHP <em>agent</em> Type Required <em>configuration</em> Infinite Tracing <em>Configuration</em> options: <em>Configuration</em> file (newrelic.ini): newrelic.distributed_tracing_enabled = true newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= &quot;YOUR_TRACE_OBSERVER_HOST&quot; Copy <em>Python</em> Here"
      },
      "id": "6072a66564441fb28e9d8595"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.06822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Python custom instrumentation",
        "Instrumentation via Config file or API",
        "Additional considerations",
        "Caution"
      ],
      "title": "Python custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "bb99d88356cade541a5fce0c6302ef7e823b1491",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation/",
      "published_at": "2021-10-01T22:11:25Z",
      "updated_at": "2021-03-11T04:36:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom instrumentation allows you to expand the agent's default monitoring and behavior to target additional functional calls and activity. You can do so via the agent config file, or via the agent API. Instrumentation via Config file or API There are two main methods for adding custom instrumentation: If you simply want to trace time spent in additional functions or methods of classes, you can identify a list of functions or methods in the agent configuration file. For more information, see Instrumentation via config file. For more complex cases, or if you want to customize how the function is identified in the New Relic One UI, you can place API calls in your application code. For more information, see Instrumentation via API. In either case, these mechanisms only target the designated function call. It is not recursive, nor does it enable full profiling below the annotated function. Additional considerations You must individually annotate each function call you want to trace. If you are not sure which function you should annotate, you can use thread profiling features to narrow it down. Caution Collecting too many metrics can impact the performance of both your application and the agent. To avoid potential data problems, try to keep the total number of unique metrics introduced by custom instrumentation under 2000.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.69839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "<em>Custom</em> <em>instrumentation</em> allows you to expand the <em>agent</em>&#x27;s default monitoring and behavior to target additional functional calls and activity. You can do so via the <em>agent</em> config file, or via the <em>agent</em> API. <em>Instrumentation</em> via Config file or API There are two main methods for adding <em>custom</em>"
      },
      "id": "6043f88de7b9d287e25799e1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.27977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". In addition, the <em>agent</em> will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the <em>Python</em> <em>agent</em> API to name web transactions or add <em>custom</em> <em>instrumentation</em>. Hosting Web hosting"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.06822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Python custom instrumentation via config file",
        "Listing functions in the configuration file",
        "Using dumbdbm",
        "Restrictions on wrapping extension APIs",
        "Overriding the reported function name",
        "Instrument with the API"
      ],
      "title": "Python custom instrumentation via config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "24ff7215889cbc9dbae8ffe435aa17fcd125b315",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file/",
      "published_at": "2021-10-01T22:11:25Z",
      "updated_at": "2021-03-11T06:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can extend the Python agent's monitoring to trace time spent in additional functions or methods of classes by modifying your configuration file. This form of custom instrumentation is simpler to implement than API calls, and does not require you to modify your code. However, for more complex needs, you may need to implement Python instrumentation by API. Listing functions in the configuration file To extend instrumentation to designated functions and class methods, add them to the transaction_tracer.function_trace setting within the newrelic section of the agent configuration file. The identifier for a function should have the form module:function and that of a class method module:class.function. Using dumbdbm In this example, you use the Python dumbdbm module and want to instrument the time it took to open a database, and then to write that database back to a file. In this case you would use: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy To list more than one item, use either of these methods: One line: Separate each item with a space. Multiple lines: Follow the ini file convention to indent the subsequent lines. When data is reported for the instrumented function, the metric will have a name in the form Function/module:function or Function/module:class.function. In the performance breakdown for a transaction, the category will show as Function and the segment will be module:function or module:class.function. For slow transaction traces, only the segment name appears. Note that where a function is actually returning a generator, only the time spent in returning the generator will be recorded and not the consumption of the values from the generator. Restrictions on wrapping extension APIs When wrapping functions by listing them in the agent configuration file, you cannot designate class methods this way when the method is a member of a class which is implemented in C code by a C extension module. This is because it is not possible to modify the method table of a type implemented using the Python C API. Overriding the reported function name When using the transaction_tracer.function_trace setting in the agent configuration file, the name of the function will be used in the metric name, with it being classified as a Function. If it is necessary to override what function name may be used in the metric name or classify it differently, then an alternate means of defining the function trace in the configuration file can be used. The equivalent for: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy would be to create two new configuration sections in the agent configuration file, one for each function to be traced: [function-trace:dumbdbm-1] enabled = true function = dumbdbm:open name = dumbdbm:open group = Function [function-trace:dumbdbm-2] enabled = true function = dumbdbm:_Database._commit name = dumbdbm:_Database._commit group = Function Copy The ini file section name should start with function-trace:. The name component that follows that prefix can be anything but should be unique across all function trace sections in the configuration file. The group and name settings can be overridden as necessary to arrive at the desired metric name. The enabled setting defaults to false and needs to be set to true to enable the function trace. Instrument with the API For simple custom instrumentation purposes, the config file method works well. For more precise and customized instrumentation and agent behavior adjustments, you will want to use the Python agent API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.70066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and needs to be set to true to enable the function trace. <em>Instrument</em> with the API For simple <em>custom</em> <em>instrumentation</em> purposes, the config file method works well. For more precise and customized <em>instrumentation</em> and <em>agent</em> behavior adjustments, you will want to use the <em>Python</em> <em>agent</em> API."
      },
      "id": "60440ff1196a67b065960f6b"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.27977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". In addition, the <em>agent</em> will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the <em>Python</em> <em>agent</em> API to name web transactions or add <em>custom</em> <em>instrumentation</em>. Hosting Web hosting"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/getting-started/apm-agent-security-python": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.64156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.59212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.61042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.64156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.61042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.45009,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/python-agent/getting-started/instrumented-python-packages": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.59212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.61042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.45002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/python-agent/getting-started/introduction-new-relic-python": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.64154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.59212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.45002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/python-agent/hosting-services/install-python-agent-gae-flexible-environment": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-01T22:12:15Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.50496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-01T22:13:12Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.32906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.90667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-heroku": [
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-01T22:13:12Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.32906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.90667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.11948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-openshift": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-01T22:12:15Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.50496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.90667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.11948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-stackato": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-01T22:12:15Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.50496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-01T22:13:12Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.32906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.11948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-webfaction": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-01T22:12:15Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.50496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-01T22:13:12Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.32906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-01T22:13:10Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.90667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/index": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.742004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 83.6329,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 76.01967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.10498,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.77455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/installation/install-python-agent-docker": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.104965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.104965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-advanced-integration": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.104965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/standard-python-agent-install": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.10495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.774475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/installation/uninstall-python-agent": [
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.774475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/installation/update-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.10495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-01T22:15:11Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.99961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-01T22:14:11Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.96202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameter-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameters-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomspanattribute-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/application-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-01T22:11:25Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.474075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program <em>python</em> path_to_app Copy Using the <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set"
      },
      "id": "603e8a89196a6741a8a83df1"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/applicationsettings-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/asgiapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.34857,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/backgroundtask-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/callablename-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/capturerequestparams-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/createdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/currenttransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.67182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcegenerator-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datastoretrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/endoftransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/externaltrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/functiontrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getlinkingmetadata-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/globalsettings-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/ignoretransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/index": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/python-agent-api-different-call-forms/",
      "sections": [
        "Python agent API different call forms"
      ],
      "published_at": "2021-10-01T11:51:09Z",
      "title": "Python agent API different call forms",
      "updated_at": "2021-07-10T22:25:28Z",
      "type": "docs",
      "external_id": "124fad99e09c389e28afd2c448b9982aa4cc56a7",
      "document_type": "page",
      "popularity": 1,
      "body": "For some functions, the New Relic Python agent API has several options for accomplishing the same thing. For example, tracing a function to provide more details on a New Relic-monitored transaction can theoretically be accomplished, depending on your setup, with any of the following APIs: A decorator. This is an import-time API. This will be the easiest option for most Python application setups. A context manager. This is a runtime-level API. These APIs might be used if you want to trace code that's not encapsulated in a function. A wrapper. The wrapper is used to create a wrapped function without the use of a decorator. A path-based wrapper. This would be used to wrap functions outside of the code they're declared in. For example, it can be used to instrument library code that you don't want to modify. For an example of a Python agent API with all four of these possible, see the function_trace call entry.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 599.4012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>API</em> different call forms",
        "sections": "<em>Python</em> <em>agent</em> <em>API</em> different call forms",
        "body": "For some functions, the New Relic <em>Python</em> <em>agent</em> <em>API</em> has several options for accomplishing the same thing. For example, tracing a function to provide more details on a New Relic-monitored transaction can theoretically be accomplished, depending on your setup, with any of the following APIs"
      },
      "id": "60ea1e5928ccbc864b4b116a"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 594.278,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 579.5354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/initialize-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/insertdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/noticeerror-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/python-agent-api-different-call-forms": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.66571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Agents</em>",
        "body": " This <em>API</em> requires distributed tracing to be enabled. For instructions on how to use this <em>call</em>, along with its partner <em>call</em> acceptDistributedTracePayload, see Enable distributed tracing with <em>agent</em> APIs. This <em>call</em> is used to implement distributed tracing. It generates a payload that is read"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Thread profiler tool",
        "Supported agents",
        "Start the profiler",
        "View profile data",
        "Agent considerations",
        ".NET-specific notes",
        "Python-specific notes",
        "Ruby-specific notes"
      ],
      "title": "Thread profiler tool",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e2d300aa5dd9bdbf73684a04080773db0d1acd2b",
      "image": "https://docs.newrelic.com/static/1331956275509db052de91a6d8caebda/c1b63/thread-profiler-session.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/thread-profiler-tool/",
      "published_at": "2021-10-01T21:11:58Z",
      "updated_at": "2021-09-20T19:33:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The thread profiler is a low-impact profiling tool that can be used in production to identify bottlenecks in an application. It works by periodically (100ms) capturing the stack trace of each thread for a specified duration. At the end of the specified duration, the stack traces are aggregated to build a tree. The call count in the tree corresponds to the number of times that function was present in the stack traces under the same context. Although the call tree cannot capture the entire execution, a large enough sample can be a good representation of the application behavior. This provides insights into the \"hot\" functions of the app where most of the time is spent. With this scope, entries sampled less than 0.05% are omitted. Supported agents This feature is available only for specific agents and versions: Java: Agent versions 1.2.004.6 or higher .NET: Framework: Agent versions 2.12.146.0 or higher .NET Core 2.0: Agent versions 8.3.360.0 or higher (Windows only) Linux: .NET Core 3.0 or higher and agent versions 8.23 or higher Python: Agent versions 1.7.0 or higher Ruby: Agent versions 3.5.5 or higher Start the profiler The thread profiler feature is enabled by default. You also may be able to turn it on or off in your agent configuration file: Java: thread_profiler.enabled NET: You cannot disable the thread profiler with .NET apps. Python: thread_profiler.enabled Ruby: thread_profiler.enabled When enabled, you can view the thread profiler from our user interface: Go to one.newrelic.com > APM > (select an app) > Events > Thread profiler. Select the host you want to run the profiler on. Set the duration for the profiling session. Select Start profiler. This triggers the agent to start the thread profiler during the next harvest cycle (every one minute) and capture data for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com > APM > (select an app) > Events > Thread profiler: Use this page to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree automatically appears on the Thread profiler page. The percentages in the call tree represent the percentage of thread backtrace samples in which each call path appeared during the profiling session. The data collection started at the PROFILE COLLECTED time. The page color-codes the tree results: Red: Percentages greater than 30% Yellow: Percentages greater than 10% Black: Percentages less than 10% If you want to... Do this... Change how the thread profile information appears Select your choices of available options in the Tree settings, and select Refresh tree. Change how much information appears Select the Expand or Collapse options above the call tree, or select the name or arrow on any line in the call tree. View summary information about any line in the call tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a different thread profile Select Back to all profiles. Agent considerations Depending on which agent you use, the thread profiling feature has additional considerations. .NET-specific notes When using thread profiling with the .NET Framework agent, be aware of the following. .NET agent Thread profiler notes Supported on Linux Thread profiling on Linux is supported on .NET Core 3.0 or later applications when running .NET agent version 8.23 or later. Managed threads only For .NET agents, the thread profiler only captures stack traces on managed threads. It does not capture stack traces on unmanaged threads. If a call to an unmanaged function occurs on a managed thread, the thread profiler will show Native:Function Call in the call tree. No line numbers A .NET thread profile does not include line numbers in the call tree. The Show line numbers checkbox in the Tree Settings does not have any effect. Bug with 64-bit v4.0 .NET CLR There is a bug in the 64-bit version 4.0 .NET Common Language Runtime (CLR) that interferes with the agent's ability to retrieve managed stack traces. If your app experiences this bug, APM will show empty thread profiles. This bug does not affect 32-bit applications. The bug is fixed in the CLR releases for .NET 4.5. To verify whether your 64-bit application has the fixed version, look at the full version of the mscorlib.dll in the C: \\ Windows \\ Microsoft.NET \\ Framework64 \\ v4.0.30319 directory. The fix is in versions 4.0.30319.17379 or higher. Other category only All threads are put in the Other category. The Web Request and Background categories are not supported. Python-specific notes When using thread profiling with the Python agent, be aware of the following. Python agent Thread profiler notes Co-routine based systems There are limits to capturing details when a co-routine based system is being used, such as gevent or eventlet modes of gunicorn. If creating a new thread, the Python agent will actually create a greenlet instead of a thread profiler background thread. Therefore, the thread profiler will not capture any web request and background transactions on the thread profiler page. Greenlets A greenlet can run only when other greenlets explicitly yield control, such as when they block. For example, if the thread sampler does get to run, it will only sample the stack for other greenlets at a point where they are blocked. It will not sample them when they are executing arbitrary code. It can completely miss execution within a greenlet if it never blocked or otherwise yielded to another greenlet. Time in Python code Time spent in pure Python code that isn't blocking requests will not be picked up, and no information will be recorded or reported. This is because results are misleading when co-routines are used. Ruby-specific notes When using thread profiling with the Ruby agent, be aware of the following. Ruby agent Thread profiler notes Backtraces The thread profiler depends on the ability to capture thread backtraces from within your Ruby application. For this reason, it requires MRI 1.9.2 or higher (for the Thread#backtrace method). Resque The Ruby agent does not currently support thread profiles with Resque background jobs. A thread profiling session initiated against Resque will only capture traces from the parent process, not the job processes. JRuby JRuby support is considered experimental at this time. There are known issues with JRuby's Thread#backtrace implementation that will affect the accuracy of and reliability of backtraces collected under JRuby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.791855,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Supported <em>agents</em>",
        "body": ". View summary information about any line in the <em>call</em> tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a <em>different</em> thread profile Select Back to all profiles. <em>Agent</em> considerations Depending on which <em>agent</em> you use, the thread"
      },
      "id": "603ebd4928ccbccc3ceba78e"
    },
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-10-01T14:10:17Z",
      "updated_at": "2021-07-10T00:05:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.39018,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .NET <em>agent</em>",
        "sections": "Manual instrumentation via <em>agent</em> <em>API</em>",
        "tags": "<em>Agents</em>",
        "body": " directory on the web server, copy NewRelic.<em>Api.Agent</em>.dll into the application&#x27;s bin directory. <em>Call</em> the <em>API</em> in your &lt;head&gt; tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web <em>Forms</em> view engine When using .NET Web <em>Forms</em> view engine, be sure"
      },
      "id": "6043d3b664441f6d66378ed5"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustomevent-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.137115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetrics-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-01T22:11:25Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.474075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program <em>python</em> path_to_app Copy Using the <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set"
      },
      "id": "603e8a89196a6741a8a83df1"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerdatasource-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/setbackgroundtask-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.13711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.1371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.1371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.1371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.1371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-01T11:53:35Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.1371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-10-01T11:44:50Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.671814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.348564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-01T11:59:47Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.82675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-01T11:59:47Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.82675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-graphQL": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74131,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 83.63269,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-01T11:56:55Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 76.01958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-message-queues": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-runtime-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-01T11:59:47Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.82675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-tips-tricks": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-01T11:57:48Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.58974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-01T11:58:45Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.39633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-01T12:00:48Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/activate-application-warning-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/emulating-legacy-server-side-parameter-configuration-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/missing-information-when-using-ensurefuture-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/no-data-appears-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/python-agent-logging": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/testing-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-01T22:15:10Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.31464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-01T11:57:49Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.76821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.74117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-ajp-wsgi-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-cherrypy-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-01T22:11:25Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.24031,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-10-01T11:42:45Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.24437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-10-01T03:09:28Z",
      "updated_at": "2021-09-27T14:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.741135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " data (for example, worker). Built-in <em>instrumentation</em> The <em>Python</em> <em>agent</em> instruments a range of <em>Python</em> packages&#x2F;modules. This <em>instrumentation</em> only occurs when the target <em>Python</em> package&#x2F;module is imported by an application. To disable default <em>instrumentation</em>, provide a special import-hook section"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastcgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-gunicorn-wsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-modwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-paste": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-scgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.79395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-uwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-waitress-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-01T12:09:34Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.03204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.79395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/uvicorn": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-01T12:09:32Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.95291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.60504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-01T12:07:02Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.79395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/guide-using-ruby-agent-api": [
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-01T22:27:06Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.38749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "These instructions are for installing the <em>Ruby</em> <em>agent</em> as a Rails plugin. For most use cases, you should instead install the <em>agent</em> gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the <em>Ruby</em> <em>agent</em> as a gem in order to have better control over versions"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "HTTP client tracing in Ruby",
        "Supported HTTP client libraries",
        "Excon notes",
        "Typhoeus notes",
        "Curb notes"
      ],
      "title": "HTTP client tracing in Ruby",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "49066996b3f5e2ec1ac4b0fdee102ee922879a90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/http-client-tracing-ruby/",
      "published_at": "2021-10-01T08:14:48Z",
      "updated_at": "2021-09-27T15:35:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent can trace outgoing HTTP requests made by your application or script in order to: Record metrics about how long your HTTP requests are taking and which hosts they're hitting. Annotate transaction traces with nodes for each HTTP request. Provide distributed tracing for requests between applications instrumented with New Relic. Supported HTTP client libraries The following HTTP client libraries are currently supported by the Ruby agent: Name Minimum supported version Notes Net::HTTP N/A (part of the Ruby standard library) Also includes libraries built upon Net::HTTP, such as httparty. Excon 0.10.1 See Excon notes. Typhoeus 0.5.3 Hydra requests get partial instrumentation, 1.8.7 stability. See Typhoeus notes. HTTPClient 2.2.0 Instrumentation of asynchronous requests is not supported. Curb 0.8.1 Curl::Multi requests get partial instrumentation. See Curb notes. http.rb 0.9.9 Excon notes The Ruby agent supports Excon version 0.19.0 or higher. Excon instrumentation relies on the ability to add an Excon middleware to the :middlewares key of Excon.defaults, so if your application modifies Excon.defaults you should ensure that you preserve the value of the :middlewares key. Typhoeus notes The Ruby agent supports Typhoeus version 0.5.3 or higher. Parallel requests made via the Hydra mechanism in Typhoeus only have partial distributed tracing support. For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Cross application tracing does not support requests made via the Hydra mechanism. Testing has shown significant issues with segfaults when running Typhoeus on MRI 1.8.7. Recommendation: Use Ruby Enterprise Edition or MRI 1.9.3 or higher to avoid these problems. Curb notes The Ruby agent supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi API currently only have partial distributed tracing support (equivalent to what is offered for requests made via the Typhoeus Hydra API). For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Requests made via the Curl::Multi mechanism do not have cross application tracing support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.49655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP client tracing in <em>Ruby</em>",
        "sections": "HTTP client tracing in <em>Ruby</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " or higher to avoid these problems. Curb notes The <em>Ruby</em> <em>agent</em> supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi <em>API</em> currently only have partial distributed tracing support (equivalent to what is offered for requests made via"
      },
      "id": "603eb84a196a6755a9a83de9"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.486824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions": [
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-01T22:27:06Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.38749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "These instructions are for installing the <em>Ruby</em> <em>agent</em> as a Rails plugin. For most use cases, you should instead install the <em>agent</em> gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the <em>Ruby</em> <em>agent</em> as a gem in order to have better control over versions"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "HTTP client tracing in Ruby",
        "Supported HTTP client libraries",
        "Excon notes",
        "Typhoeus notes",
        "Curb notes"
      ],
      "title": "HTTP client tracing in Ruby",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "49066996b3f5e2ec1ac4b0fdee102ee922879a90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/http-client-tracing-ruby/",
      "published_at": "2021-10-01T08:14:48Z",
      "updated_at": "2021-09-27T15:35:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent can trace outgoing HTTP requests made by your application or script in order to: Record metrics about how long your HTTP requests are taking and which hosts they're hitting. Annotate transaction traces with nodes for each HTTP request. Provide distributed tracing for requests between applications instrumented with New Relic. Supported HTTP client libraries The following HTTP client libraries are currently supported by the Ruby agent: Name Minimum supported version Notes Net::HTTP N/A (part of the Ruby standard library) Also includes libraries built upon Net::HTTP, such as httparty. Excon 0.10.1 See Excon notes. Typhoeus 0.5.3 Hydra requests get partial instrumentation, 1.8.7 stability. See Typhoeus notes. HTTPClient 2.2.0 Instrumentation of asynchronous requests is not supported. Curb 0.8.1 Curl::Multi requests get partial instrumentation. See Curb notes. http.rb 0.9.9 Excon notes The Ruby agent supports Excon version 0.19.0 or higher. Excon instrumentation relies on the ability to add an Excon middleware to the :middlewares key of Excon.defaults, so if your application modifies Excon.defaults you should ensure that you preserve the value of the :middlewares key. Typhoeus notes The Ruby agent supports Typhoeus version 0.5.3 or higher. Parallel requests made via the Hydra mechanism in Typhoeus only have partial distributed tracing support. For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Cross application tracing does not support requests made via the Hydra mechanism. Testing has shown significant issues with segfaults when running Typhoeus on MRI 1.8.7. Recommendation: Use Ruby Enterprise Edition or MRI 1.9.3 or higher to avoid these problems. Curb notes The Ruby agent supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi API currently only have partial distributed tracing support (equivalent to what is offered for requests made via the Typhoeus Hydra API). For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Requests made via the Curl::Multi mechanism do not have cross application tracing support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.49655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP client tracing in <em>Ruby</em>",
        "sections": "HTTP client tracing in <em>Ruby</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " or higher to avoid these problems. Curb notes The <em>Ruby</em> <em>agent</em> supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi <em>API</em> currently only have partial distributed tracing support (equivalent to what is offered for requests made via"
      },
      "id": "603eb84a196a6755a9a83de9"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.486824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation": [
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-01T22:27:06Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.38745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "These instructions are for installing the <em>Ruby</em> <em>agent</em> as a Rails plugin. For most use cases, you should instead install the <em>agent</em> gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the <em>Ruby</em> <em>agent</em> as a gem in order to have better control over versions"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "HTTP client tracing in Ruby",
        "Supported HTTP client libraries",
        "Excon notes",
        "Typhoeus notes",
        "Curb notes"
      ],
      "title": "HTTP client tracing in Ruby",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "49066996b3f5e2ec1ac4b0fdee102ee922879a90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/http-client-tracing-ruby/",
      "published_at": "2021-10-01T08:14:48Z",
      "updated_at": "2021-09-27T15:35:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent can trace outgoing HTTP requests made by your application or script in order to: Record metrics about how long your HTTP requests are taking and which hosts they're hitting. Annotate transaction traces with nodes for each HTTP request. Provide distributed tracing for requests between applications instrumented with New Relic. Supported HTTP client libraries The following HTTP client libraries are currently supported by the Ruby agent: Name Minimum supported version Notes Net::HTTP N/A (part of the Ruby standard library) Also includes libraries built upon Net::HTTP, such as httparty. Excon 0.10.1 See Excon notes. Typhoeus 0.5.3 Hydra requests get partial instrumentation, 1.8.7 stability. See Typhoeus notes. HTTPClient 2.2.0 Instrumentation of asynchronous requests is not supported. Curb 0.8.1 Curl::Multi requests get partial instrumentation. See Curb notes. http.rb 0.9.9 Excon notes The Ruby agent supports Excon version 0.19.0 or higher. Excon instrumentation relies on the ability to add an Excon middleware to the :middlewares key of Excon.defaults, so if your application modifies Excon.defaults you should ensure that you preserve the value of the :middlewares key. Typhoeus notes The Ruby agent supports Typhoeus version 0.5.3 or higher. Parallel requests made via the Hydra mechanism in Typhoeus only have partial distributed tracing support. For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Cross application tracing does not support requests made via the Hydra mechanism. Testing has shown significant issues with segfaults when running Typhoeus on MRI 1.8.7. Recommendation: Use Ruby Enterprise Edition or MRI 1.9.3 or higher to avoid these problems. Curb notes The Ruby agent supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi API currently only have partial distributed tracing support (equivalent to what is offered for requests made via the Typhoeus Hydra API). For such requests, the Ruby agent will record a single transaction trace node representing the entire batch, but you will not be able to see the details about each individual request in the batch. Requests made via the Curl::Multi mechanism do not have cross application tracing support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.496506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP client tracing in <em>Ruby</em>",
        "sections": "HTTP client tracing in <em>Ruby</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " or higher to avoid these problems. Curb notes The <em>Ruby</em> <em>agent</em> supports Curb version 0.8.1 or higher. Curb instrumentation on JRuby is not supported. Requests made via the Curl::Multi <em>API</em> currently only have partial distributed tracing support (equivalent to what is offered for requests made via"
      },
      "id": "603eb84a196a6755a9a83de9"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.48676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ]
}