{
  "/docs/agents/python-agent/back-end-services/python-agent-celery": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-12T08:58:04Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " framework, or <em>back</em>-<em>end</em> <em>services</em>. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The <em>Python</em> <em>agent</em> does not support Windows environments. <em>Python</em> <em>Python</em> (CPython"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/10/python-update%20-7-0-0-166/",
      "sections": [
        "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166"
      ],
      "published_at": "2021-10-17T12:55:49Z",
      "title": "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166",
      "updated_at": "2021-10-17T11:31:06Z",
      "type": "docs",
      "external_id": "069188585b789621f721f3c1e55fa898971e330a",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "With the release of Python Agent version v7.0.0.166, upon agent upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the agent in order to have access to distributed traces. Distributed Tracing gives software teams working in modern environments an easy way to capture, visualize, and analyze traces through complex architectures, including architectures that use both monoliths and microservices. Whatâ€™s the impact? With this change, customers will see distributed traces immediately upon upgrading to Python version v7.0.0.166. Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the Python agent configuration file by setting distributed_tracing.enabled=false OR by setting the environment variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=false. If you need more traces and are experiencing dropped spans, the agent reservoir can be expanded to accommodate more spans. To do so, set environment variable or config item called span_events.max_samples_stored to a value greater than 2,000 up to a maximum value of 10,000. Note that increasing this value may impact memory usage. With Distributed Tracing on by default, Cross Application Tracing (CAT) will now be deprecated and will be removed in a future version of the agent. Customers on CAT will now see distributed traces instead. Customers who would like to revert back to CAT can do so in the configuration file by setting cross_application_tracer.enabled = true. It is however recommended to stay using distributed tracing, given that CAT will be removed in the future.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.04952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "sections": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "body": "With the release of <em>Python</em> <em>Agent</em> version v7.0.0.166, upon <em>agent</em> upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the <em>agent</em> in order to have access to distributed traces. Distributed Tracing gives software teams working in modern"
      },
      "id": "616c097a28ccbc9883002660"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70201168/",
      "sections": [
        "Python agent v7.2.1.168",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.1.168",
      "updated_at": "2021-10-17T11:23:49Z",
      "type": "docs",
      "external_id": "a65992579452c743643996bf2dde4d0adb12bd0d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds a patch to correctly build wheels for Python 3.10. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for Python 3.10 An incorrect version of cibuildwheel failed to create Python 3.10 wheels. This has been fixed and wheels should now be available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.385925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "sections": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds a patch to correctly build wheels for <em>Python</em> 3.10. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for <em>Python</em> 3.10 An incorrect version of cibuildwheel failed to create <em>Python</em> 3.10 wheels. This has been fixed and wheels should now be available."
      },
      "id": "616c07c528ccbc12710012bd"
    }
  ],
  "/docs/agents/python-agent/configuration/python-agent-configuration": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/10/python-update%20-7-0-0-166/",
      "sections": [
        "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166"
      ],
      "published_at": "2021-10-17T12:55:49Z",
      "title": "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166",
      "updated_at": "2021-10-17T11:31:06Z",
      "type": "docs",
      "external_id": "069188585b789621f721f3c1e55fa898971e330a",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "With the release of Python Agent version v7.0.0.166, upon agent upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the agent in order to have access to distributed traces. Distributed Tracing gives software teams working in modern environments an easy way to capture, visualize, and analyze traces through complex architectures, including architectures that use both monoliths and microservices. Whatâ€™s the impact? With this change, customers will see distributed traces immediately upon upgrading to Python version v7.0.0.166. Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the Python agent configuration file by setting distributed_tracing.enabled=false OR by setting the environment variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=false. If you need more traces and are experiencing dropped spans, the agent reservoir can be expanded to accommodate more spans. To do so, set environment variable or config item called span_events.max_samples_stored to a value greater than 2,000 up to a maximum value of 10,000. Note that increasing this value may impact memory usage. With Distributed Tracing on by default, Cross Application Tracing (CAT) will now be deprecated and will be removed in a future version of the agent. Customers on CAT will now see distributed traces instead. Customers who would like to revert back to CAT can do so in the configuration file by setting cross_application_tracer.enabled = true. It is however recommended to stay using distributed tracing, given that CAT will be removed in the future.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "sections": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "body": ". Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the <em>Python</em> <em>agent</em> <em>configuration</em> file by setting distributed_tracing.enabled=false OR by setting the environment variable"
      },
      "id": "616c097a28ccbc9883002660"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-12T08:58:04Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70201168/",
      "sections": [
        "Python agent v7.2.1.168",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.1.168",
      "updated_at": "2021-10-17T11:23:49Z",
      "type": "docs",
      "external_id": "a65992579452c743643996bf2dde4d0adb12bd0d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds a patch to correctly build wheels for Python 3.10. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for Python 3.10 An incorrect version of cibuildwheel failed to create Python 3.10 wheels. This has been fixed and wheels should now be available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.385925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "sections": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds a patch to correctly build wheels for <em>Python</em> 3.10. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for <em>Python</em> 3.10 An incorrect version of cibuildwheel failed to create <em>Python</em> 3.10 wheels. This has been fixed and wheels should now be available."
      },
      "id": "616c07c528ccbc12710012bd"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file": [
    {
      "sections": [
        "Python custom instrumentation",
        "Instrumentation via Config file or API",
        "Additional considerations",
        "Caution"
      ],
      "title": "Python custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "bb99d88356cade541a5fce0c6302ef7e823b1491",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation/",
      "published_at": "2021-10-12T11:46:33Z",
      "updated_at": "2021-03-11T04:36:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom instrumentation allows you to expand the agent's default monitoring and behavior to target additional functional calls and activity. You can do so via the agent config file, or via the agent API. Instrumentation via Config file or API There are two main methods for adding custom instrumentation: If you simply want to trace time spent in additional functions or methods of classes, you can identify a list of functions or methods in the agent configuration file. For more information, see Instrumentation via config file. For more complex cases, or if you want to customize how the function is identified in the New Relic One UI, you can place API calls in your application code. For more information, see Instrumentation via API. In either case, these mechanisms only target the designated function call. It is not recursive, nor does it enable full profiling below the annotated function. Additional considerations You must individually annotate each function call you want to trace. If you are not sure which function you should annotate, you can use thread profiling features to narrow it down. Caution Collecting too many metrics can impact the performance of both your application and the agent. To avoid potential data problems, try to keep the total number of unique metrics introduced by custom instrumentation under 2000.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.6645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "<em>Custom</em> <em>instrumentation</em> allows you to expand the <em>agent</em>&#x27;s default monitoring and behavior to target additional functional calls and activity. You can do so via the <em>agent</em> config file, or via the <em>agent</em> API. <em>Instrumentation</em> via Config file or API There are two main methods for adding <em>custom</em>"
      },
      "id": "6043f88de7b9d287e25799e1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-12T10:22:22Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.155556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.48369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Python custom instrumentation via config file",
        "Listing functions in the configuration file",
        "Using dumbdbm",
        "Restrictions on wrapping extension APIs",
        "Overriding the reported function name",
        "Instrument with the API"
      ],
      "title": "Python custom instrumentation via config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "24ff7215889cbc9dbae8ffe435aa17fcd125b315",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file/",
      "published_at": "2021-10-12T11:04:47Z",
      "updated_at": "2021-03-11T06:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can extend the Python agent's monitoring to trace time spent in additional functions or methods of classes by modifying your configuration file. This form of custom instrumentation is simpler to implement than API calls, and does not require you to modify your code. However, for more complex needs, you may need to implement Python instrumentation by API. Listing functions in the configuration file To extend instrumentation to designated functions and class methods, add them to the transaction_tracer.function_trace setting within the newrelic section of the agent configuration file. The identifier for a function should have the form module:function and that of a class method module:class.function. Using dumbdbm In this example, you use the Python dumbdbm module and want to instrument the time it took to open a database, and then to write that database back to a file. In this case you would use: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy To list more than one item, use either of these methods: One line: Separate each item with a space. Multiple lines: Follow the ini file convention to indent the subsequent lines. When data is reported for the instrumented function, the metric will have a name in the form Function/module:function or Function/module:class.function. In the performance breakdown for a transaction, the category will show as Function and the segment will be module:function or module:class.function. For slow transaction traces, only the segment name appears. Note that where a function is actually returning a generator, only the time spent in returning the generator will be recorded and not the consumption of the values from the generator. Restrictions on wrapping extension APIs When wrapping functions by listing them in the agent configuration file, you cannot designate class methods this way when the method is a member of a class which is implemented in C code by a C extension module. This is because it is not possible to modify the method table of a type implemented using the Python C API. Overriding the reported function name When using the transaction_tracer.function_trace setting in the agent configuration file, the name of the function will be used in the metric name, with it being classified as a Function. If it is necessary to override what function name may be used in the metric name or classify it differently, then an alternate means of defining the function trace in the configuration file can be used. The equivalent for: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy would be to create two new configuration sections in the agent configuration file, one for each function to be traced: [function-trace:dumbdbm-1] enabled = true function = dumbdbm:open name = dumbdbm:open group = Function [function-trace:dumbdbm-2] enabled = true function = dumbdbm:_Database._commit name = dumbdbm:_Database._commit group = Function Copy The ini file section name should start with function-trace:. The name component that follows that prefix can be anything but should be unique across all function trace sections in the configuration file. The group and name settings can be overridden as necessary to arrive at the desired metric name. The enabled setting defaults to false and needs to be set to true to enable the function trace. Instrument with the API For simple custom instrumentation purposes, the config file method works well. For more precise and customized instrumentation and agent behavior adjustments, you will want to use the Python agent API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.66678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and needs to be set to true to enable the function trace. <em>Instrument</em> with the API For simple <em>custom</em> <em>instrumentation</em> purposes, the config file method works well. For more precise and customized <em>instrumentation</em> and <em>agent</em> behavior adjustments, you will want to use the <em>Python</em> <em>agent</em> API."
      },
      "id": "60440ff1196a67b065960f6b"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-12T10:22:22Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.155556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.48369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/getting-started/apm-agent-security-python": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-12T08:58:04Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.53439,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-12T11:34:44Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.425125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.593475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent": [
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-12T11:34:44Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.425125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.593475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-10-12T11:09:34Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.9261,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/python-agent/getting-started/instrumented-python-packages": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-12T08:58:04Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.534386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.593475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-10-12T11:09:34Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.9261,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/python-agent/getting-started/introduction-new-relic-python": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-12T08:58:04Z",
      "updated_at": "2021-09-02T05:38:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8, and 3.9. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.534386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " Relic <em>agent</em> and plugin end-of-life (EOL) policy. Support for new <em>Python</em> releases The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Instrumented Python packages",
        "Web frameworks",
        "aiohttp",
        "Bottle",
        "CherryPy",
        "Django",
        "Falcon",
        "FastAPI",
        "Flask",
        "gRPC",
        "Pylons",
        "Pyramid",
        "Sanic",
        "Starlette",
        "Tornado",
        "Web2py",
        "Back-end services",
        "gearman",
        "Celery",
        "Template rendering",
        "Genshi",
        "Jinja2",
        "Mako",
        "GraphQL Frameworks",
        "Instance details",
        "SQL database adapters",
        "NoSQL database clients",
        "Elasticsearch clients",
        "Memcache clients",
        "Solr service clients",
        "Message broker clients",
        "External web services"
      ],
      "title": "Instrumented Python packages",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "b81fac54f3ae383bcad1223a25f09849c4e03964",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/instrumented-python-packages/",
      "published_at": "2021-10-12T11:34:44Z",
      "updated_at": "2021-09-20T19:44:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document lists the packages and modules automatically instrumented by the Python agent after you install it. You can also use custom instrumentation if you want to: Disable instrumentation for specific packages or modules if the instrumentation interferes with your app. Instrument a-third party package or module that is not instrumented automatically by the agent. Add more specific instrumentation for your own code, such as to track the time spent in additional functions. To request built-in instrumentation for additional packages, get support at support.newrelic.com. Web frameworks aiohttp Support for versions 2.2.x or higher. Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Uncaught exceptions resulting in a non-200 HTTP response. The web transaction is named after the view function. Bottle Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via SimpleTemplate, MakoTemplate, CheetahTemplate, Jinja2Template and SimpleTalTemplate interfaces. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Bottle. The web transaction is named after the view function. As Bottle uses external template libraries, see also which of those packages may be supported for additional detail. CherryPy Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from CherryPy. The web transaction is named after the handler function. As CherryPy relies upon external template libraries, see also which of those packages may be supported for additional detail. Django Function timing in transactions traces for slow transactions is provided for: Request middleware. View middleware. Template response middleware. Response middleware. Exception middleware. Template rendering. Exception logging is provided for: Exceptions occurring during loading of view handlers by URL resolver. Exceptions occurring within the execution of the view handler. Uncaught exceptions which would otherwise generate 500 responses from Django. Page load timing (sometimes referred to as real user monitoring or RUM) support consists of: Optional automatic insertion of JavaScript header/footer via response middleware. Provision of template tag library to enable manual insertion of the JavaScript header/footer into templates. The web transaction is named after the view handler, unless a request or view middleware returns a response object prior to the view handler being invoked. Instrumentation is also implemented to provide better web transaction naming or additional functional tracing when using: django-REST-framework django-piston django-tastypie Falcon Function timing in transactions traces for slow transactions is provided for: Handler function. Exception logging is provided for: Uncaught exceptions which would otherwise generate error responses from Falcon. The web transaction is named after the handler function. FastAPI Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from FastAPI. The web transaction is named after the route handler. Flask Function timing in transactions traces for slow transactions is provided for: View function. Template rendering via render_template() and render_template_string(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Flask. The web transaction is named after the view function. As Flask uses Jinja2 for templates, see also details of Jinja2 instrumentation listed below. gRPC Supported for versions 1.4 or higher. Function timing in transaction traces for slow transactions is provided for: _stream_response_in_pool _unary_response_in_pool Exception logging is provided for: grpc server aborts Pylons Function timing in transactions traces for slow transactions is provided for: Controller function, before and after methods. Template rendering via render_genshi(), render_jinja2() and render_mako(). Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pylons. The web transaction is named after the controller/action. As Pylons can use Genshi, Jinja2 or Mako for templates see also details of instrumentation for those modules listed below. Pyramid Function timing in transactions traces for slow transactions is provided for: View handler functions. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Pyramid. The web transaction is named after the view handler. Sanic Function timing in transactions traces for slow transactions is provided for: View functions (coroutines). Application middleware. Exception logging is provided for: Exceptions occurring inside of a request middleware. Exceptions occurring inside of a response middleware. Exceptions occurring inside a request handler. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Sanic. The web transaction is named after the view handler. Starlette Function timing in transactions traces for slow transactions is provided for: Route functions (coroutines). Application middleware. Exception handlers. Background Tasks Exception logging is provided for: Exceptions occurring inside middleware. Exceptions occurring inside an exception handler. Uncaught exceptions which would otherwise generate 500 responses from Starlette. The web transaction is named after the route handler. Tornado You can use the Python agent with an app that uses Tornado 6. Web2py Function timing in transactions traces for slow transactions is provided for: Overall time in models phase. Overall time in controller phase. Overall time in view phase. Execution time for specific scripts executed within models, controller and view phases. Exception logging is provided for: Uncaught exceptions which would otherwise generate 500 responses from Web2py. The web transaction is named after the view script. Back-end services gearman Timing of task execution performed in a gearman worker recorded as background tasks against designated web application. Timing as a web external any client side calls to a gearman server to queue up or wait for the execution of queued tasks. Celery Timing of task execution recorded as background tasks against designated web application. Template rendering Genshi Function timing in transactions traces for slow transactions is provided for: Template rendering. Jinja2 Function timing in transactions traces for slow transactions is provided for: Template compilation. Template rendering. Mako Function timing in transactions traces for slow transactions is provided for: Template rendering. GraphQL Frameworks The Python agent provides insight into your GraphQL application's operations and resolvers and reports GraphQL-specific metrics and span attributes. For more information on transaction naming and other features, please view our GraphQL documentation. As of agent version 6.10.0.165, the agent supports the following GraphQL frameworks: Graphene Ariadne Strawberry Starlette GraphQL FastAPI GraphQL Instance details The agent collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information depends on your Python agent version. Python agent version 2.72.0.52 or higher supports the following: Database Python package name Minimum package version Minimum agent version PostgreSQL psycopg2 2.0.14 2.72.0.52 MySQL MySQLdb 1.2.5 2.74.0.54 Redis redis 2.6.2 2.74.0.54 Memcached python-memcached 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. SQL database adapters For Python DB-API 2.0 compliant modules listed in this section, the Python agent supports: Timing of database queries Capturing SQL for the database query Capturing a stack trace for long database queries MySQL and PostgreSQ only: Capturing explain plans for slow database queries The Python agent should be able to track database queries for any Python DB-API 2.0 compliant modules. However, we only officially supports the modules listed in this section.. cx_Oracle MySQLdb oursql proboscis psycopg2 psycopg2ct psycopg2cffi pymysql pyodbc ibm_db_dbi mysql-connector-python py-postgresql pymssql For the following database adapters, we provides additional instrumentation for functionality outside of the DB-API 2.0 specification, such as shortcut methods to execute queries without creating cursors: pysqlite2 sqlite3 If your database client module is not listed in this section, get support at support.newrelic.com. New Relic Support may be able to suggest a temporary change to your config file to get it working. NoSQL database clients Timing of calls made against NoSQL databases are provided for the following client modules. pymongo redis Elasticsearch clients Time spent in calls made to Elasticsearch will be listed in both the main overview chart, as well as in the Databases tab in the UI. elasticsearch pyelasticsearch Memcache clients Timing of memcache requests and capture of type of request is provided for the following memcache client modules. memcache pylibmc bmemcached pymemcache umemcache Solr service clients Timing of Solr service requests and type of request is provided for the following Solr client modules. pysolr solrpy Message broker clients Timing of message broker transactions is provided for the following modules. pika External web services Timing of external web service requests is carried out via the following modules. aiohttp dropbox facepy feedparser gRPC httplib httplib2 httpx pywapi requests urllib urllib2 urllib3 xmlrpclib",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.42511,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrumented <em>Python</em> packages",
        "sections": "Instrumented <em>Python</em> packages",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 1.51 2.76.0.55 Elasticsearch elasticsearch 0.45 2.78.0.56 To request instance-level information from datastores currently not listed for your <em>agent</em>, <em>get</em> support at support.newrelic.com. SQL database adapters For <em>Python</em> DB-API 2.0 compliant modules listed in this section, the <em>Python</em> <em>agent</em> supports"
      },
      "id": "6044103f28ccbcdecb2c60c0"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-10-12T11:09:34Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.9261,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/python-agent/hosting-services/install-python-agent-gae-flexible-environment": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-12T11:07:07Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.722946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.63035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-12T14:31:49Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-heroku": [
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.63035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-12T14:31:49Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-12T13:52:36Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.39876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-openshift": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-12T11:07:07Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.722946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-12T14:31:49Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-12T13:52:36Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.39876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-stackato": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-12T11:07:07Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.722946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.63035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-10-12T13:52:36Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.39876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-webfaction": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-10-12T11:07:07Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.722946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.63035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-10-12T14:31:49Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/index": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/10/python-update%20-7-0-0-166/",
      "sections": [
        "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166"
      ],
      "published_at": "2021-10-17T12:55:49Z",
      "title": "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166",
      "updated_at": "2021-10-17T11:31:06Z",
      "type": "docs",
      "external_id": "069188585b789621f721f3c1e55fa898971e330a",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "With the release of Python Agent version v7.0.0.166, upon agent upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the agent in order to have access to distributed traces. Distributed Tracing gives software teams working in modern environments an easy way to capture, visualize, and analyze traces through complex architectures, including architectures that use both monoliths and microservices. Whatâ€™s the impact? With this change, customers will see distributed traces immediately upon upgrading to Python version v7.0.0.166. Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the Python agent configuration file by setting distributed_tracing.enabled=false OR by setting the environment variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=false. If you need more traces and are experiencing dropped spans, the agent reservoir can be expanded to accommodate more spans. To do so, set environment variable or config item called span_events.max_samples_stored to a value greater than 2,000 up to a maximum value of 10,000. Note that increasing this value may impact memory usage. With Distributed Tracing on by default, Cross Application Tracing (CAT) will now be deprecated and will be removed in a future version of the agent. Customers on CAT will now see distributed traces instead. Customers who would like to revert back to CAT can do so in the configuration file by setting cross_application_tracer.enabled = true. It is however recommended to stay using distributed tracing, given that CAT will be removed in the future.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.69851,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "sections": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "body": "With the release of <em>Python</em> <em>Agent</em> version v7.0.0.166, upon <em>agent</em> upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the <em>agent</em> in order to have access to distributed traces. Distributed Tracing gives software teams working in modern"
      },
      "id": "616c097a28ccbc9883002660"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70201168/",
      "sections": [
        "Python agent v7.2.1.168",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.1.168",
      "updated_at": "2021-10-17T11:23:49Z",
      "type": "docs",
      "external_id": "a65992579452c743643996bf2dde4d0adb12bd0d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds a patch to correctly build wheels for Python 3.10. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for Python 3.10 An incorrect version of cibuildwheel failed to create Python 3.10 wheels. This has been fixed and wheels should now be available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.95958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "sections": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds a patch to correctly build wheels for <em>Python</em> 3.10. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for <em>Python</em> 3.10 An incorrect version of cibuildwheel failed to create <em>Python</em> 3.10 wheels. This has been fixed and wheels should now be available."
      },
      "id": "616c07c528ccbc12710012bd"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70202169/",
      "sections": [
        "Python agent v7.2.2.169",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.2.169",
      "updated_at": "2021-10-17T11:39:44Z",
      "type": "docs",
      "external_id": "31550ea11f014e93ee514e410ffc1d1b0f4242c0",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent fixes an issue with urllib recursion as well as an import error caused by non-ASCII characters in comments Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Urllib3 Recursion Regression Urllib3 recursion regression issue that was seen in Gevent has been fixed Import Error caused by non-ASCII character in comments An import error caused by non-ASCII characters has been fixed to the correct quotation formatting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.03769,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.2.169",
        "sections": "<em>Python</em> <em>agent</em> v7.2.2.169",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> fixes an issue with urllib recursion as well as an import error caused by non-ASCII characters in comments Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes"
      },
      "id": "616c0b8028ccbc36ce002fa8"
    }
  ],
  "/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.16294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.19549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/installation/install-python-agent-docker": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.16294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.16293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-advanced-integration": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.16293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/installation/standard-python-agent-install": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.162926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.19549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/installation/uninstall-python-agent": [
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.003296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.19549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/installation/update-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.16292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-10-12T14:02:00Z",
      "updated_at": "2021-08-02T10:59:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.003296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    },
    {
      "sections": [
        "Advanced install of New Relic Python agent",
        "Requirements",
        "Summary of install process",
        "1. Download and install",
        "pip install (RECOMMENDED)",
        "easy_install",
        "Buildout install",
        "Manual download and install",
        "Tip",
        "2. Create config file",
        "3. Integrate the agent",
        "uWSGI",
        "mod_wsgi",
        "Tornado 6",
        "WebFaction",
        "4. Restart app and check for data",
        "Additional steps"
      ],
      "title": "Advanced install of New Relic Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "f886475165ab65ed6ba27730001babb00b4e0423",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent/",
      "published_at": "2021-10-12T13:51:35Z",
      "updated_at": "2021-07-27T23:03:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is a detailed guide showing how to install New Relic's Python agent for application performance monitoring. For simpler install instructions that will work for the majority of Python frameworks (including Django), see the standard installation guide. Read this advanced guide if you cannot use the standard install, or if you want more detailed information about the installation steps. Requirements Before you install the Python agent: Read and understand the compatibility and requirements. Have your New Relic account's license key. (If you don't have one already, sign up for a New Relic account.) Summary of install process Here's a summary of how to install the Python agent: Download and install the Python agent package. Create config file. Integrate the agent with your app. Restart your app. You can also install the Python agent in a Google App Engine flexible environment or use other hosting services, such as Heroku. 1. Download and install Download and install the agent package using your preferred procedure. For example: pip install (RECOMMENDED) Install the newrelic package directly from PyPi by running: pip install newrelic Copy easy_install Run: easy_install newrelic Copy We recommend using pip install, because pip will correctly remove old versions of the agent when upgrading. Buildout install Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Manual download and install To obtain the package manually: Download the appropriate tar.gz file from our download site. Unpack the tar.gz file. In the top directory of the unpacked package, install it by running: python setup.py install Copy Tip This should be the python executable for the Python installation or virtual environment where you want to install the Python agent software. If installing into a system-wide Python installation, use the sudo command or run the command as root. 2. Create config file The config file is the primary method to customize the agent's behavior. You can also use server-side configuration or environment variables. After you install the package, the newrelic-admin script will be in the same directory as the Python executable. To create the agent config file, run this command in the Python executable's directory and include your license key: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy The generate-config command creates the newrelic.ini config file. 3. Integrate the agent You need to integrate the Python agent with your application so that your app's major functions and web requests are received by the agent. To integrate the Python agent with your app, run the newrelic-admin script in front of your usual app startup command. If you use any of the following services, follow these guidelines before continuing to the admin script procedure. uWSGI The agent can be used with uWSGI version 1.2.6 or higher. The recommended integration method (using the admin script via the command line) can be used for uWSGI, but you will need to supply certain specific command line options to the uwsgi executable. These include: Option Purpose --enable-threads By default uWSGI does not enable threading support within the Python interpreter core, so you cannot create background threads from Python code. However, the Python agent relies on being able to create background threads, so this option is required. To automatically configure uWSGI for multiple threads, use the --threads option. --single-interpreter By default uWSGI will execute Python code within a sub-interpreter of the process rather than the main Python interpreter created when Python is first initialized. This allows multiple separate Python web applications to run within one process, but keep them separated so they do not interfere with each other. Older versions of uWSGI can fail when using sub-interpreters with threading enabled. Recommendation: Use the --single-interpreter option, and restrict it to a single web application per process. mod_wsgi If you use mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. If you use mod_wsgi-express, you can run the admin script via the command line. For more information, see the New Relic mod_wsgi documentation. Tornado 6 The agent currently provides support for Tornado 6 only. For more information, see the Tornado 6 web framework documentation. WebFaction Python web applications on WebFaction typically use Apache/mod_wsgi. With mod_wsgi, you cannot use the recommended integration method of running the admin script via the command line. Instead, you must manually integrate the Python agent in your app code. To run the newrelic-admin script via the command line, place the following in front of your standard app startup command: The path to the New Relic config file The newrelic-admin run-program script command For example, here are instructions for a Bourne-style shell. You may need to adjust these instructions for a different shell. If you use a Python gunicorn web server and your startup command is: gunicorn -w 3 wsgi:application Copy Then use this command: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn -w 3 wsgi:application Copy For more details about using the admin script, see Running the admin script from command line. If you cannot use the admin script method or don't want to, see the manual integration method. 4. Restart app and check for data When you finish the integration procedure: Restart your app server. Wait five minutes. View your app's data in APM's Summary page. If data does not appear after five minutes, follow the troubleshooting procedures. Additional steps Here are some suggested next steps after installing the Python agent for your app: Explore your data in New Relic One and get comfortable with the standard user interface features. Learn about APM's Summary page, the Transactions page, and other performance monitoring features. Change your application's name, and use other configuration options. Set up custom instrumentation for application activity not monitored by default. Configure custom events and custom attributes to collect additional data from your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.11513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "sections": "Advanced <em>install</em> of New Relic <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This is a detailed guide showing how to install New Relic&#x27;s <em>Python</em> <em>agent</em> for application performance monitoring. For simpler install instructions that will work for the majority of <em>Python</em> frameworks (including Django), see the standard <em>installation</em> guide. Read this advanced guide if you cannot use"
      },
      "id": "6043ebbe28ccbcd5f32c6086"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameter-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameters-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomspanattribute-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/application-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/applicationsettings-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/asgiapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/backgroundtask-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/callablename-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/capturerequestparams-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/createdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/currenttransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcegenerator-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datastoretrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/endoftransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/externaltrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/functiontrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    },
    {
      "sections": [
        "disable_browser_autorum (Python agent API)",
        "Syntax",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Disabling browser monitoring"
      ],
      "title": "disable_browser_autorum (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "068ca0b201ac84b18c6821cb8737292b2bcb8e2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api/",
      "published_at": "2021-10-12T09:24:48Z",
      "updated_at": "2021-07-09T07:36:55Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page/request it is called for. This call only affects the current web request and must be called prior to the point where the browser agent header/footer JavaScript are injected. For more on how the browser agent JavaScript is inserted, see Install browser monitoring. Tip You can also disable browser injection by setting the newrelic.disable_browser_autorum key for the specific request in the WSGI environ dictionary passed by the WSGI server into the WSGI application being monitored. Parameters Parameter Description flag boolean Optional. Default is True. Set to False to instead allow browser agent injection. Return values None. Examples Disabling browser monitoring In this example, you've upgraded the agent and you've noticed the N JavaScript that's automatically injected onto the HTML page is also being injected into every iFrame that is loaded on those pages. This has caused your pageviews to increase substantially. On those specific iFrame views, you would make this call: newrelic.agent.disable_browser_autorum() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.77405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page&#x2F;request it is called for. This call only affects the current web request and must be called prior to the point where"
      },
      "id": "6044015ee7b9d2ad37579a16"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "disable_browser_autorum (Python agent API)",
        "Syntax",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Disabling browser monitoring"
      ],
      "title": "disable_browser_autorum (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "068ca0b201ac84b18c6821cb8737292b2bcb8e2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api/",
      "published_at": "2021-10-12T09:24:48Z",
      "updated_at": "2021-07-09T07:36:55Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page/request it is called for. This call only affects the current web request and must be called prior to the point where the browser agent header/footer JavaScript are injected. For more on how the browser agent JavaScript is inserted, see Install browser monitoring. Tip You can also disable browser injection by setting the newrelic.disable_browser_autorum key for the specific request in the WSGI environ dictionary passed by the WSGI server into the WSGI application being monitored. Parameters Parameter Description flag boolean Optional. Default is True. Set to False to instead allow browser agent injection. Return values None. Examples Disabling browser monitoring In this example, you've upgraded the agent and you've noticed the N JavaScript that's automatically injected onto the HTML page is also being injected into every iFrame that is loaded on those pages. This has caused your pageviews to increase substantially. On those specific iFrame views, you would make this call: newrelic.agent.disable_browser_autorum() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.77405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page&#x2F;request it is called for. This call only affects the current web request and must be called prior to the point where"
      },
      "id": "6044015ee7b9d2ad37579a16"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getlinkingmetadata-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/globalsettings-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/ignoretransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/index": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 662.317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 624.8079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 624.50995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/initialize-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/insertdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetransaction-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/noticeerror-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/python-agent-api-different-call-forms": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70201168/",
      "sections": [
        "Python agent v7.2.1.168",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.1.168",
      "updated_at": "2021-10-17T11:23:49Z",
      "type": "docs",
      "external_id": "a65992579452c743643996bf2dde4d0adb12bd0d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds a patch to correctly build wheels for Python 3.10. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for Python 3.10 An incorrect version of cibuildwheel failed to create Python 3.10 wheels. This has been fixed and wheels should now be available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.593124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "sections": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds a patch to correctly build wheels for <em>Python</em> 3.10. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for <em>Python</em> 3.10 An incorrect version of cibuildwheel failed to create <em>Python</em> 3.10 wheels. This has been fixed and wheels should now be available."
      },
      "id": "616c07c528ccbc12710012bd"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70200167/",
      "sections": [
        "Python agent v7.2.0.167",
        "Notes",
        "New Features",
        "Changes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.0.167",
      "updated_at": "2021-10-17T11:23:50Z",
      "type": "docs",
      "external_id": "ed7a40c83cc612abddcc0d3864bdfdf935ef5306",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds supported builds for Python 3.10 and fixes bugs. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. New Features Python 3.10 Wheels Wheels for Python 3.10 are now available and supported. Changes Upgrade internal urllib3 to v1.26.7 The internal copy of urllib3 has been upgraded to v1.26.7 to address Python 3.10 issues and deprecation warnings. Bug Fixes Errors fail to be ignored by server-side config Previously it was possible on transaction exit to have an error fail to be ignored when the settings were supplied via server-side config. This has been fixed. Deprecation warnings for imp module removed The imp module has been deprecated for some time, and has been issuing warnings. This module has been replaced with importlib when available. Older versions of Python may still require the use of imp, but no deprecation warnings should be emitted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.59887,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.0.167",
        "sections": "<em>Python</em> <em>agent</em> v7.2.0.167",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds supported builds for <em>Python</em> 3.10 and fixes bugs. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. New Features <em>Python</em> 3.10 Wheels Wheels for <em>Python</em> 3.10 are now"
      },
      "id": "616c07c628ccbc0e8d001dd5"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-10-12T11:50:02Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.94624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustomevent-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.6994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetrics-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api": [
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    },
    {
      "sections": [
        "disable_browser_autorum (Python agent API)",
        "Syntax",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Disabling browser monitoring"
      ],
      "title": "disable_browser_autorum (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "068ca0b201ac84b18c6821cb8737292b2bcb8e2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api/",
      "published_at": "2021-10-12T09:24:48Z",
      "updated_at": "2021-07-09T07:36:55Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page/request it is called for. This call only affects the current web request and must be called prior to the point where the browser agent header/footer JavaScript are injected. For more on how the browser agent JavaScript is inserted, see Install browser monitoring. Tip You can also disable browser injection by setting the newrelic.disable_browser_autorum key for the specific request in the WSGI environ dictionary passed by the WSGI server into the WSGI application being monitored. Parameters Parameter Description flag boolean Optional. Default is True. Set to False to instead allow browser agent injection. Return values None. Examples Disabling browser monitoring In this example, you've upgraded the agent and you've noticed the N JavaScript that's automatically injected onto the HTML page is also being injected into every iFrame that is loaded on those pages. This has caused your pageviews to increase substantially. On those specific iFrame views, you would make this call: newrelic.agent.disable_browser_autorum() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.77405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "disable_browser_autorum (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.disable_browser_autorum(flag=True) Copy Disables browser monitoring for a web request. Description This call disables browser monitoring for the page&#x2F;request it is called for. This call only affects the current web request and must be called prior to the point where"
      },
      "id": "6044015ee7b9d2ad37579a16"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerdatasource-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/setbackgroundtask-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-12T11:24:11Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.69937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "get_browser_timing_footer (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_footer (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "f8aa69371e0ea39ad676c608f7b9ed54dcbe3892",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T22:38:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.get_browser_timing_footer() Copy Generates a browser agent footer for injecting the JavaScript agent. Description This call returns the browser agent JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual instrumentation instructions for how to use this call with get_browser_timing_header to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent footer JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.84442,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_footer (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.get_browser_timing_footer() Copy Generates a browser <em>agent</em> footer for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript footer snippet that, along with the header JavaScript snippet, is used to enable browser monitoring. See the manual"
      },
      "id": "604401d7196a671348960f31"
    },
    {
      "sections": [
        "get_browser_timing_header (Python agent API)",
        "Syntax",
        "Description",
        "Return values",
        "Examples",
        "Manual browser monitoring instrumentation"
      ],
      "title": "get_browser_timing_header (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "797f22934186c9aaf01ecfe49cf6866046841a5e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api/",
      "published_at": "2021-10-12T11:43:07Z",
      "updated_at": "2021-07-09T09:19:32Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax get_browser_timing_header() Copy Generates a browser agent header for injecting the JavaScript agent. Description This call returns the browser agent JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible for your application, or if you want to collect browser data for only specific pages. This is a manual alternative to automatic insertion of this JavaScript by the agent. See the manual instrumentation instructions for how to use this method with get_browser_timing_footer to enable browser monitoring. This call must be called for every web request where you want to inject the JavaScript snippet. It cannot be called at global scope and cached. Return values Returns the browser agent header JavaScript. Examples Manual browser monitoring instrumentation See Manually instrument browser monitoring for instructions on how to use the header and footer calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.78201,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "get_browser_timing_header (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax get_browser_timing_header() Copy Generates a browser <em>agent</em> header for injecting the JavaScript <em>agent</em>. Description This call returns the browser <em>agent</em> JavaScript header snippet that you can use to enable browser monitoring. You might use this if automatic instrumentation is not possible"
      },
      "id": "604401d5196a672b3d960f19"
    }
  ],
  "/docs/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.2355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-12T11:29:43Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.comÂ > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transactionâ€™s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.comÂ > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.82672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.2355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.2355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-12T11:29:43Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.comÂ > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transactionâ€™s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.comÂ > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.82672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.23549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.23549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-graphQL": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/2021/10/python-update%20-7-0-0-166/",
      "sections": [
        "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166"
      ],
      "published_at": "2021-10-17T12:55:49Z",
      "title": "Distributed Tracing enabled by default with Python Agent Update: Version 7.0.0.166",
      "updated_at": "2021-10-17T11:31:06Z",
      "type": "docs",
      "external_id": "069188585b789621f721f3c1e55fa898971e330a",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "With the release of Python Agent version v7.0.0.166, upon agent upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the agent in order to have access to distributed traces. Distributed Tracing gives software teams working in modern environments an easy way to capture, visualize, and analyze traces through complex architectures, including architectures that use both monoliths and microservices. Whatâ€™s the impact? With this change, customers will see distributed traces immediately upon upgrading to Python version v7.0.0.166. Distributed Tracing on by default provides more data and better visibility for cross-application requests. If you do not need this feature, it can be turned off in the Python agent configuration file by setting distributed_tracing.enabled=false OR by setting the environment variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=false. If you need more traces and are experiencing dropped spans, the agent reservoir can be expanded to accommodate more spans. To do so, set environment variable or config item called span_events.max_samples_stored to a value greater than 2,000 up to a maximum value of 10,000. Note that increasing this value may impact memory usage. With Distributed Tracing on by default, Cross Application Tracing (CAT) will now be deprecated and will be removed in a future version of the agent. Customers on CAT will now see distributed traces instead. Customers who would like to revert back to CAT can do so in the configuration file by setting cross_application_tracer.enabled = true. It is however recommended to stay using distributed tracing, given that CAT will be removed in the future.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.6962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "sections": "Distributed Tracing enabled by default with <em>Python</em> <em>Agent</em> Update: Version 7.0.0.166",
        "body": "With the release of <em>Python</em> <em>Agent</em> version v7.0.0.166, upon <em>agent</em> upgrade, customers will now have Distributed Tracing on by default. This update eliminates the need to configure the <em>agent</em> in order to have access to distributed traces. Distributed Tracing gives software teams working in modern"
      },
      "id": "616c097a28ccbc9883002660"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70201168/",
      "sections": [
        "Python agent v7.2.1.168",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.1.168",
      "updated_at": "2021-10-17T11:23:49Z",
      "type": "docs",
      "external_id": "a65992579452c743643996bf2dde4d0adb12bd0d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent adds a patch to correctly build wheels for Python 3.10. Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for Python 3.10 An incorrect version of cibuildwheel failed to create Python 3.10 wheels. This has been fixed and wheels should now be available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.95729,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "sections": "<em>Python</em> <em>agent</em> v7.2.1.168",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> adds a patch to correctly build wheels for <em>Python</em> 3.10. Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes Wheels not available for <em>Python</em> 3.10 An incorrect version of cibuildwheel failed to create <em>Python</em> 3.10 wheels. This has been fixed and wheels should now be available."
      },
      "id": "616c07c528ccbc12710012bd"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-70202169/",
      "sections": [
        "Python agent v7.2.2.169",
        "Notes",
        "Bug Fixes"
      ],
      "published_at": "2021-10-17T21:57:14Z",
      "title": "Python agent v7.2.2.169",
      "updated_at": "2021-10-17T11:39:44Z",
      "type": "docs",
      "external_id": "31550ea11f014e93ee514e410ffc1d1b0f4242c0",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This release of the Python agent fixes an issue with urllib recursion as well as an import error caused by non-ASCII characters in comments Install the agent using easy_install/pip/distribute via the Python Package Index or download it directly from the New Relic download site. Bug Fixes Urllib3 Recursion Regression Urllib3 recursion regression issue that was seen in Gevent has been fixed Import Error caused by non-ASCII character in comments An import error caused by non-ASCII characters has been fixed to the correct quotation formatting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.035446,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v7.2.2.169",
        "sections": "<em>Python</em> <em>agent</em> v7.2.2.169",
        "body": "Notes This release of the <em>Python</em> <em>agent</em> fixes an issue with urllib recursion as well as an import error caused by non-ASCII characters in comments Install the <em>agent</em> using easy_install&#x2F;pip&#x2F;distribute via the <em>Python</em> Package Index or download it directly from the New Relic download site. Bug Fixes"
      },
      "id": "616c0b8028ccbc36ce002fa8"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-message-queues": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.23549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-runtime-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.23549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-12T11:29:43Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.comÂ > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transactionâ€™s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.comÂ > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.82672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-tips-tricks": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-12T11:27:54Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.15489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-12T11:28:43Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.23549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-12T11:30:46Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your systemâ€™s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collectorâ€™s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.62662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/activate-application-warning-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.360596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.36163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.007454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/emulating-legacy-server-side-parameter-configuration-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.360596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.36163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.007454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/missing-information-when-using-ensurefuture-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.360596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.36163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.007454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/no-data-appears-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.360596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.36163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Troubleshooting browser instrumentation in Python",
        "Problem",
        "Solution",
        "Check content structure.",
        "Verify that content compression is not interfering.",
        "Check page source for conditional blocks."
      ],
      "title": "Troubleshooting browser instrumentation in Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "e71d7e503421735005e51c12cb2fe1b81ea03924",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python/",
      "published_at": "2021-10-12T09:26:53Z",
      "updated_at": "2021-07-09T12:17:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have problems instrumenting browser with the Python agent, follow the standard troubleshooting procedures for browser monitoring. Here are some additional tips for Python. Solution Follow these recommendations to check content structure and verify that content compression is not interfering. Check content structure. If you are expecting to see the browser agent added automatically but do not, check whether any of these restrictions might apply. The Content-Type for the HTML response must be text/html. The Content-Encoding response header cannot be set. The Content-Disposition response header cannot mark the response as an attachment. The Content-Disposition specified in an http-equiv meta tag within the HTML<head> element cannot mark the response as an attachment. The <body> element of the HTML response must appear within the first 64 kbytes. If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and text/html in your agent configuration file. browser_monitoring.content_type = text/html application/xhtml+xml Copy Make sure the browser_monitoring.content_typeis a space-separated list of content types. When adding application/xhtml+xml as an allowed content type for automatic instrumentation, be aware that the resulting page will no longer validate correctly as application/xhtml+xml, although the page should still be loaded and rendered correctly by browsers. To resolve issues with the other content limitations, use manual instrumentation. Verify that content compression is not interfering. If you are using a WSGI or web framework middleware or a plugin that encodes the response content, such as when doing response compression, automatic instrumentation may not work. The Python agent provides specific support for Django GZipMiddleware and Flask-Compress with auto-instrumentation. However, currently this is not supported for paste.gzipper, because it contains a bug which makes it unusable in conjunction with the agent's WSGI middleware that adds the browser monitoring instrumentation. If you encounter this problem, use manual instrumentation, or switch to using your web server or front-end proxy to compress the response content, rather than performing compression within your web application. The latter solution may also offer performance benefits. Check page source for conditional blocks. When inspecting your page source, you see the browser agent inserted incorrectly inside a conditional block. <!--[if IE]> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /> <script type=\"text/javascript\">/*Browser agent here*/</script> <![endif]--> Copy This can happen because the Python agent does not check for these conditional blocks when deciding to place the browser agent. Consider using manual instrumentation in this case.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.45191,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshooting</em> browser instrumentation in <em>Python</em>",
        "sections": "<em>Troubleshooting</em> browser instrumentation in <em>Python</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem If you have problems instrumenting browser with the <em>Python</em> <em>agent</em>, follow the standard <em>troubleshooting</em> procedures for browser monitoring. Here are some additional tips for <em>Python</em>. Solution Follow these recommendations to check content structure and verify that content compression"
      },
      "id": "604402ec28ccbc088b2c60af"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/python-agent-logging": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.36058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.361626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.00745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/testing-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.36058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.361626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.00745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-12T14:32:40Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.36058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-12T11:47:30Z",
      "updated_at": "2021-07-27T14:36:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.361626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " appear in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-10-12T09:25:47Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.00745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-ajp-wsgi-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-cherrypy-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-12T10:48:19Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.34805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-10-12T09:12:33Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.44978,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-10-12T08:59:15Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your applicationâ€™s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.83147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Async</em> <em>instrumentation</em>",
        "body": "If you are having problems using the Java <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastcgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-gunicorn-wsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-modwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-paste": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-scgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-12T11:33:41Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.7404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-uwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-waitress-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-12T12:37:54Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.05972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-12T11:33:41Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.7404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/uvicorn": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-12T14:35:12Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.01518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-12T11:32:47Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.59026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-12T11:33:41Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.7404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/guide-using-ruby-agent-api": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-12T12:38:51Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.54496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-10-12T11:07:06Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) â‡’ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.7624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-12T12:39:55Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.96765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions": [
    {
      "sections": [
        "Guide to using the Ruby agent API",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Instrument calls to datastores",
        "Instrument calls to externals",
        "Instrument calls for distributed tracing"
      ],
      "title": "Guide to using the Ruby agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "b8a0743300bf602822bfdcf6c4760c64a4bebc0e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/guide-using-ruby-agent-api/",
      "published_at": "2021-10-12T12:38:51Z",
      "updated_at": "2021-07-27T14:23:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent provides a public API with documentation available on GitHub. The GitHub documentation tells you how to set up custom instrumentation of your Ruby app and collect more in-depth data: Overview Public API methods The following sections explain common goals, solutions, and links to relevant parts of the documentation. Important When using the Ruby agent API, ensure that you have the latest Ruby agent release. Several APIs used in the following examples require Ruby agent version 4.6.0 or higher. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Time a method New Relic is not instrumenting automatically Create a new transaction. See Tracing transaction entry points. Time something other than a single method call Use the Tracer API. Prevent a transaction from reporting to New Relic Ignore the transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use these methods when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See Method tracers. Time something other than a single method call Use the Tracer API. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them in the query builder. Use these methods when you want to change how New Relic instruments a transaction that is already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction See Naming transactions. Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See Adding custom attributes. Mark a transaction as a background job See Monitor custom background jobs. Mark a transaction as a web transaction Pass a :category => :controller option to set_transaction_name(). For more information, see Naming transactions. Prevent a transaction from affecting your Apdex score See Ignoring Apdex contributions. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored or expected. If you want to... Do this... Report an error the agent does not report automatically See Sending New Relic handled errors. Prevent the agent from reporting an error at all Mark the error as ignored. See Error Collector to use the error_collector.ignore_errors config option. Prevent an error from affecting your Apdex or error rate, but still report it to New Relic Mark the error as expected. See Sending New Relic handled errors, and set :expected to true. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See record_custom_event(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. Pass a hash of attributes to record_custom_event(). Report custom performance data Create a custom metric. See record_metric(). Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also retrieve the browser agent via APM agent API calls. For more information, see browser_timing_header(). Instrument calls to datastores Use these methods to collect data about your app's connections to other datastores: If you want to... Do this... Time a call to a datastore not instrumented automatically by New Relic See wrap(). Time a datastore call that can't cleanly be wrapped in a Ruby block See Tracer.start_datastore_segment(). You must call finish on the object returned by this method. Capture SQL queries along with timing See notice_sql(). Capture non-SQL queries along with timing See notice_statement(). Instrument calls to externals Use these methods to collect data for external requests: If you want to... Do this... Time a call to an external request not instrumented automatically by New Relic Use Tracer.start_external_segment(). You must call finish on the object returned by this method. Add cross-application tracing (CAT) headers to an outbound HTTP request Use add_request_headers(). Read CAT headers from an inbound HTTP request Use read_response_headers(). Generate an obfuscated string to transport CAT information in an outbound request Use get_request_metadata(). Process an obfuscated string containing CAT information received from an inbound request Use process_response_metadata(). Instrument calls for distributed tracing Important The following API examples require Ruby agent version 6.9.0 or higher. These APIs require distributed tracing to be enabled. Distributed tracing lets you see the paths requests take as they travel through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Send a payload/header to the called service. See insert_distributed_trace_headers(). Accept a payload/header received from the first service, which will link these services together in a trace See accept_distributed_trace_headers().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.28882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the <em>Ruby</em> <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the <em>Ruby</em> <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> provides a public <em>API</em> with documentation available on GitHub. The GitHub documentation tells you how to set up custom instrumentation of your <em>Ruby</em> app and collect more in-depth data: Overview Public <em>API</em> methods The following sections explain common goals, solutions"
      },
      "id": "604403a5196a67e712960f33"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-10-12T11:07:06Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) â‡’ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.7624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-12T12:39:55Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.96765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation": [
    {
      "sections": [
        "Guide to using the Ruby agent API",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Instrument calls to datastores",
        "Instrument calls to externals",
        "Instrument calls for distributed tracing"
      ],
      "title": "Guide to using the Ruby agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "b8a0743300bf602822bfdcf6c4760c64a4bebc0e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/guide-using-ruby-agent-api/",
      "published_at": "2021-10-12T12:38:51Z",
      "updated_at": "2021-07-27T14:23:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent provides a public API with documentation available on GitHub. The GitHub documentation tells you how to set up custom instrumentation of your Ruby app and collect more in-depth data: Overview Public API methods The following sections explain common goals, solutions, and links to relevant parts of the documentation. Important When using the Ruby agent API, ensure that you have the latest Ruby agent release. Several APIs used in the following examples require Ruby agent version 4.6.0 or higher. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Time a method New Relic is not instrumenting automatically Create a new transaction. See Tracing transaction entry points. Time something other than a single method call Use the Tracer API. Prevent a transaction from reporting to New Relic Ignore the transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use these methods when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See Method tracers. Time something other than a single method call Use the Tracer API. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them in the query builder. Use these methods when you want to change how New Relic instruments a transaction that is already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction See Naming transactions. Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See Adding custom attributes. Mark a transaction as a background job See Monitor custom background jobs. Mark a transaction as a web transaction Pass a :category => :controller option to set_transaction_name(). For more information, see Naming transactions. Prevent a transaction from affecting your Apdex score See Ignoring Apdex contributions. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored or expected. If you want to... Do this... Report an error the agent does not report automatically See Sending New Relic handled errors. Prevent the agent from reporting an error at all Mark the error as ignored. See Error Collector to use the error_collector.ignore_errors config option. Prevent an error from affecting your Apdex or error rate, but still report it to New Relic Mark the error as expected. See Sending New Relic handled errors, and set :expected to true. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See record_custom_event(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. Pass a hash of attributes to record_custom_event(). Report custom performance data Create a custom metric. See record_metric(). Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also retrieve the browser agent via APM agent API calls. For more information, see browser_timing_header(). Instrument calls to datastores Use these methods to collect data about your app's connections to other datastores: If you want to... Do this... Time a call to a datastore not instrumented automatically by New Relic See wrap(). Time a datastore call that can't cleanly be wrapped in a Ruby block See Tracer.start_datastore_segment(). You must call finish on the object returned by this method. Capture SQL queries along with timing See notice_sql(). Capture non-SQL queries along with timing See notice_statement(). Instrument calls to externals Use these methods to collect data for external requests: If you want to... Do this... Time a call to an external request not instrumented automatically by New Relic Use Tracer.start_external_segment(). You must call finish on the object returned by this method. Add cross-application tracing (CAT) headers to an outbound HTTP request Use add_request_headers(). Read CAT headers from an inbound HTTP request Use read_response_headers(). Generate an obfuscated string to transport CAT information in an outbound request Use get_request_metadata(). Process an obfuscated string containing CAT information received from an inbound request Use process_response_metadata(). Instrument calls for distributed tracing Important The following API examples require Ruby agent version 6.9.0 or higher. These APIs require distributed tracing to be enabled. Distributed tracing lets you see the paths requests take as they travel through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Send a payload/header to the called service. See insert_distributed_trace_headers(). Accept a payload/header received from the first service, which will link these services together in a trace See accept_distributed_trace_headers().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.28882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the <em>Ruby</em> <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the <em>Ruby</em> <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> provides a public <em>API</em> with documentation available on GitHub. The GitHub documentation tells you how to set up custom instrumentation of your <em>Ruby</em> app and collect more in-depth data: Overview Public <em>API</em> methods The following sections explain common goals, solutions"
      },
      "id": "604403a5196a67e712960f33"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-12T12:38:51Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.54496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-10-12T11:07:06Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) â‡’ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.7624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    }
  ]
}