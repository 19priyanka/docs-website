{
  "/docs/apm/agents/php-agent/php-agent-api/newrelicissampled": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-14T23:04:28Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.8213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-14T23:03:49Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.82109,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-14T16:14:50Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.82109,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/agent-stops-working-after-updating-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.269066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.780495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/checking-loaded-configuration-files-directory": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/data-stops-reporting-while-using-selinux": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/data-stops-reporting": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/determine-permissions-requirements-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26892,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36993,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.780365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/first-php-transaction-not-reported": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26892,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36993,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.780365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/generating-logs-troubleshooting-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.268875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/ini-settings-not-taking-effect-immediately": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.268875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/missing-php-module": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.3699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78028,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.3699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78028,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/php-agent-not-reporting-errors": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-14T16:30:33Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.88455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " transactions. <em>Troubleshoot</em> your installation If you encounter issues with the <em>PHP</em> <em>agent</em>, see our full list of <em>troubleshooting</em> documentation. Common installation issues include: No data appears (<em>PHP</em>) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (<em>PHP</em>)"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/protocol-mismatch-error": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26873,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.7802,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26868,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/symfony44-performance": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.067535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.4758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.3396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/threaded-apache-worker-mpms": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26863,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369865,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.780106,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/transactions-named-indexphp-or-unknown": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26863,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369865,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.780106,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/troubleshoot-php-agent-instance-count": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.268585,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/uninstrumented-time-traces": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.268585,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/using-phpinfo-verify-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26854,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/verifying-php-daemon": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26854,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.36984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.78003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/why-when-restart-your-web-server-php": [
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "7393b56d9200660ecddfe89835cedc53d30c4f4f",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-12-16T01:41:32Z",
      "updated_at": "2021-12-14T22:59:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.26849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> configuration",
        "sections": "<em>PHP</em> <em>agent</em> configuration",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": Non-command line (such as Apache or <em>php</em>-fpm) <em>agents</em> can start the daemon. 2: Only command line <em>agents</em> can start the daemon. 3: The <em>agent</em> will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the <em>agent</em>. Important If &#x2F;etc&#x2F;newrelic"
      },
      "id": "617e9587e7b9d295d9c04783"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-15T00:03:32Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.369835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.77998,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>PHP</em> <em>agent</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the <em>agent</em>. To <em>troubleshoot</em> if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/async-instrumentation/asyncpg": [
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "0b8cb6921769a1f599b29f66145cbdf738df5d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-12-14T20:55:40Z",
      "updated_at": "2021-10-23T18:37:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.66771,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db82c196a6788d7f7ce13"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "ea90750938d5d871627358abb21716bed420515f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-12-14T23:05:44Z",
      "updated_at": "2021-10-23T23:28:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.48958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "617db5fd28ccbc8e987fe5ab"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.05658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in <em>instrumentation</em> The <em>Python</em> <em>agent</em> instruments a range of <em>Python</em> packages&#x2F;modules. This <em>instrumentation</em> only occurs when"
      },
      "id": "617dc153196a67cf3df7bf56"
    }
  ],
  "/docs/apm/agents/python-agent/async-instrumentation/django-asgi-mode": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "778ab8d9a1029be25202cc21badc018a452dabab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-12-14T23:05:09Z",
      "updated_at": "2021-10-23T23:29:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.39731,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "617db5ffe7b9d221e3c04b9d"
    },
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "0b8cb6921769a1f599b29f66145cbdf738df5d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-12-14T20:55:40Z",
      "updated_at": "2021-10-23T18:37:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.66771,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db82c196a6788d7f7ce13"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.05658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in <em>instrumentation</em> The <em>Python</em> <em>agent</em> instruments a range of <em>Python</em> packages&#x2F;modules. This <em>instrumentation</em> only occurs when"
      },
      "id": "617dc153196a67cf3df7bf56"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/enabling-disabling-attributes-python": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.15536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "f4f54c662c48051ef95f47a8dbd2134a2b0ca258",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-12-14T23:06:18Z",
      "updated_at": "2021-10-30T21:15:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.40974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " apply to <em>Python</em> <em>agent</em> version 2.56.0.42 or higher. To take advantage of all available features, update your <em>Python</em> <em>agent</em> to the latest release. <em>Python</em> <em>agent</em> web transaction <em>attributes</em> The following lists the <em>attributes</em> that can be configured in the <em>Python</em> <em>agent</em> for web transactions. For more"
      },
      "id": "617db5ff196a6769c5f7c136"
    },
    {
      "sections": [
        "Python attribute examples",
        "Contents",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disable all attributes",
        "Select specific destinations",
        "Select values and destinations"
      ],
      "title": "Python attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "e15557dc2d4e713c6567d38d65397b490b39c17b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/python-attribute-examples/",
      "published_at": "2021-12-14T23:05:43Z",
      "updated_at": "2021-10-30T21:16:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the Python agent. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events, and error_collector. To limit the destinations see the Selecting specific destinations example. Configuration: attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can simply pass a list to attributes.include: Configuration: attributes.include = request.parameters.user_id request.parameters.product_id Copy Disable all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: attributes.enabled = false attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Select specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: attributes.enabled = true transaction_tracer.attributes.enabled = false attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Select values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: browser_monitoring.attributes.enabled = true attributes.exclude = food* attributes.include = food.fruit.* transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.909836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>attribute</em> examples",
        "sections": "<em>Python</em> <em>attribute</em> examples",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Here are some examples of using <em>attributes</em> with the <em>Python</em> <em>agent</em>. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events"
      },
      "id": "617db638196a67ae1af7c8ed"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/python-agent-attributes": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.1553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Python attribute examples",
        "Contents",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disable all attributes",
        "Select specific destinations",
        "Select values and destinations"
      ],
      "title": "Python attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "e15557dc2d4e713c6567d38d65397b490b39c17b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/python-attribute-examples/",
      "published_at": "2021-12-14T23:05:43Z",
      "updated_at": "2021-10-30T21:16:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the Python agent. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events, and error_collector. To limit the destinations see the Selecting specific destinations example. Configuration: attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can simply pass a list to attributes.include: Configuration: attributes.include = request.parameters.user_id request.parameters.product_id Copy Disable all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: attributes.enabled = false attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Select specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: attributes.enabled = true transaction_tracer.attributes.enabled = false attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Select values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: browser_monitoring.attributes.enabled = true attributes.exclude = food* attributes.include = food.fruit.* transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.909836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>attribute</em> examples",
        "sections": "<em>Python</em> <em>attribute</em> examples",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Here are some examples of using <em>attributes</em> with the <em>Python</em> <em>agent</em>. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events"
      },
      "id": "617db638196a67ae1af7c8ed"
    },
    {
      "sections": [
        "Enabling and disabling attributes (Python)",
        "Configuration settings",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "error_collector.attributes.enabled",
        "transaction_events.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use \\* for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated configuration settings"
      ],
      "title": "Enabling and disabling attributes (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "748a58a1318c97d1951d073d5e7eb790a0dc373b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/enabling-disabling-attributes-python/",
      "published_at": "2021-12-14T23:05:44Z",
      "updated_at": "2021-10-23T23:33:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the configuration settings to enable or disable Python agent attributes, and the rules that our agents use when determining which attributes to include or exclude for a destination. This also includes a summary of the Python agent configuration settings that have been deprecated with the release of agent attributes. Configuration settings Use the following destination settings to open or close the destination to any attribute collection: attributes.enabled Type Boolean Default True Turns on or turns off all attributes. transaction_tracer.attributes.enabled Type Boolean Default True Turns on or turns off all attributes for transaction traces. If attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this configuration setting is set. error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If attributes.enabled is false, no attributes will be sent to traced errors regardless of how this configuration setting is set. transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If attributes.enabled is false, no attributes will be sent to transaction events regardless of how this configuration setting is set. browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets sent to the PageView destination. If attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this configuration setting is set. Use the following attribute/destination specific .include or .exclude settings to add or remove specific attributes in specific destinations: attributes.include Type: Space-Separated List of Strings Default: (none) If attributes are enabled, all attribute keys in this list will be sent. attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent. transaction_tracer.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for transaction traces, all attribute keys in this list will be sent in transaction traces. transaction_tracer.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in transaction traces. error_collector.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for traced errors, all attribute keys in this list will be sent in traced errors. error_collector.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in traced errors. transaction_events.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for transaction events, all attribute keys in this list will be sent in transaction events. transaction_events.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in transaction events. browser_monitoring.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page views. browser_monitoring.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys found in this list will not be sent in page views. Attribute rules The agent follows these rules when determining which attributes to include or exclude for a destination: Root level takes precedence for enabled. The attributes.enabled field trumps all other settings. When false, no attributes will be reported. Example configuration: attributes.enabled = false attributes.include = foo bar transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: foo, bar, baz Keys included for all destinations: Keys excluded for all destinations: foo, bar, baz Copy Destination enabled takes precedence over include and exclude. The YOUR_DESTINATION.attributes.enabled flags take precedence over include and exclude keys. Example configuration: transaction_tracer.attributes.enabled = false attributes.include = one two transaction_tracer.attributes.include = three four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request parameters are disabled for all destinations. Example configuration: attributes.enabled = true attributes.exclude = baz Copy Example output: Keys passed in: foo, bar, baz Keys included: foo, bar Keys excluded: baz Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: attributes.enabled = true attributes.include = foo bar attributes.exclude = nerd bar Copy Example output: Keys passed in: foo, bar, nerd Keys included: foo Keys excluded: nerd, bar Copy Keys are case sensitive. Keys are case-sensitive. Example configuration: attributes.enabled = true attributes.exclude = username UsErNaMe Copy Example output: Keys passed in: username, Username, USERNAME, UsErNaMe, userNAME Keys included: Username, USERNAME, userNAME Keys excluded: username, UsErNaMe Copy Use \\* for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: attributes.enabled = true attributes.include = custom* attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: attributes.enabled = true attributes.include = request.parameters.foo attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: attributes.include = foo transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated configuration settings The following configuration settings have been deprecated. Switch to the new attributes configuration for these settings when upgrading your Python agent. Deprecated setting New setting capture_params attributes.include = request.parameters.* By default, request parameters are not sent. Add request.parameters.* to the attributes.include list to turn on all request parameters. The capture_params property has been deprecated. ignored_params attributes.exclude = request.parameters.{name} Add each request parameter key to the attributes.exclude list. Be sure to prepend the key with request.parameters. The ignored_params property has been deprecated. analytics_events.enabled transaction_events.enabled analytics_events.capture_attributes transaction_events.capture_attributes analytics_events.max_samples_stored transaction_events.max_samples_stored browser_monitoring.capture_attributes browser_monitoring.attributes.enabled error_collector.capture_attributes error_collector.attributes.enabled transaction_tracer.capture_attributes transaction_tracer.attributes.enabled",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.84365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enabling and disabling <em>attributes</em> (<em>Python</em>)",
        "sections": "Enabling and disabling <em>attributes</em> (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This describes the configuration settings to enable or disable <em>Python</em> <em>agent</em> <em>attributes</em>, and the rules that our <em>agents</em> use when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>Python</em> <em>agent</em> configuration settings that have been deprecated"
      },
      "id": "617db5fee7b9d282acc0540d"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/python-attribute-examples": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.1553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "f4f54c662c48051ef95f47a8dbd2134a2b0ca258",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-12-14T23:06:18Z",
      "updated_at": "2021-10-30T21:15:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.40974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " apply to <em>Python</em> <em>agent</em> version 2.56.0.42 or higher. To take advantage of all available features, update your <em>Python</em> <em>agent</em> to the latest release. <em>Python</em> <em>agent</em> web transaction <em>attributes</em> The following lists the <em>attributes</em> that can be configured in the <em>Python</em> <em>agent</em> for web transactions. For more"
      },
      "id": "617db5ff196a6769c5f7c136"
    },
    {
      "sections": [
        "Enabling and disabling attributes (Python)",
        "Configuration settings",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "error_collector.attributes.enabled",
        "transaction_events.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use \\* for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated configuration settings"
      ],
      "title": "Enabling and disabling attributes (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "748a58a1318c97d1951d073d5e7eb790a0dc373b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/attributes/enabling-disabling-attributes-python/",
      "published_at": "2021-12-14T23:05:44Z",
      "updated_at": "2021-10-23T23:33:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the configuration settings to enable or disable Python agent attributes, and the rules that our agents use when determining which attributes to include or exclude for a destination. This also includes a summary of the Python agent configuration settings that have been deprecated with the release of agent attributes. Configuration settings Use the following destination settings to open or close the destination to any attribute collection: attributes.enabled Type Boolean Default True Turns on or turns off all attributes. transaction_tracer.attributes.enabled Type Boolean Default True Turns on or turns off all attributes for transaction traces. If attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this configuration setting is set. error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If attributes.enabled is false, no attributes will be sent to traced errors regardless of how this configuration setting is set. transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If attributes.enabled is false, no attributes will be sent to transaction events regardless of how this configuration setting is set. browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets sent to the PageView destination. If attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this configuration setting is set. Use the following attribute/destination specific .include or .exclude settings to add or remove specific attributes in specific destinations: attributes.include Type: Space-Separated List of Strings Default: (none) If attributes are enabled, all attribute keys in this list will be sent. attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent. transaction_tracer.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for transaction traces, all attribute keys in this list will be sent in transaction traces. transaction_tracer.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in transaction traces. error_collector.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for traced errors, all attribute keys in this list will be sent in traced errors. error_collector.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in traced errors. transaction_events.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for transaction events, all attribute keys in this list will be sent in transaction events. transaction_events.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys in this list will not be sent in transaction events. browser_monitoring.attributes.include Type: Space-separated list of strings Default: (none) If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page views. browser_monitoring.attributes.exclude Type: Space-separated list of strings Default: (none) All attribute keys found in this list will not be sent in page views. Attribute rules The agent follows these rules when determining which attributes to include or exclude for a destination: Root level takes precedence for enabled. The attributes.enabled field trumps all other settings. When false, no attributes will be reported. Example configuration: attributes.enabled = false attributes.include = foo bar transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: foo, bar, baz Keys included for all destinations: Keys excluded for all destinations: foo, bar, baz Copy Destination enabled takes precedence over include and exclude. The YOUR_DESTINATION.attributes.enabled flags take precedence over include and exclude keys. Example configuration: transaction_tracer.attributes.enabled = false attributes.include = one two transaction_tracer.attributes.include = three four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request parameters are disabled for all destinations. Example configuration: attributes.enabled = true attributes.exclude = baz Copy Example output: Keys passed in: foo, bar, baz Keys included: foo, bar Keys excluded: baz Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: attributes.enabled = true attributes.include = foo bar attributes.exclude = nerd bar Copy Example output: Keys passed in: foo, bar, nerd Keys included: foo Keys excluded: nerd, bar Copy Keys are case sensitive. Keys are case-sensitive. Example configuration: attributes.enabled = true attributes.exclude = username UsErNaMe Copy Example output: Keys passed in: username, Username, USERNAME, UsErNaMe, userNAME Keys included: Username, USERNAME, userNAME Keys excluded: username, UsErNaMe Copy Use \\* for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: attributes.enabled = true attributes.include = custom* attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: attributes.enabled = true attributes.include = request.parameters.foo attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: attributes.include = foo transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated configuration settings The following configuration settings have been deprecated. Switch to the new attributes configuration for these settings when upgrading your Python agent. Deprecated setting New setting capture_params attributes.include = request.parameters.* By default, request parameters are not sent. Add request.parameters.* to the attributes.include list to turn on all request parameters. The capture_params property has been deprecated. ignored_params attributes.exclude = request.parameters.{name} Add each request parameter key to the attributes.exclude list. Be sure to prepend the key with request.parameters. The ignored_params property has been deprecated. analytics_events.enabled transaction_events.enabled analytics_events.capture_attributes transaction_events.capture_attributes analytics_events.max_samples_stored transaction_events.max_samples_stored browser_monitoring.capture_attributes browser_monitoring.attributes.enabled error_collector.capture_attributes error_collector.attributes.enabled transaction_tracer.capture_attributes transaction_tracer.attributes.enabled",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.84365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enabling and disabling <em>attributes</em> (<em>Python</em>)",
        "sections": "Enabling and disabling <em>attributes</em> (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This describes the configuration settings to enable or disable <em>Python</em> <em>agent</em> <em>attributes</em>, and the rules that our <em>agents</em> use when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>Python</em> <em>agent</em> configuration settings that have been deprecated"
      },
      "id": "617db5fee7b9d282acc0540d"
    }
  ],
  "/docs/apm/agents/python-agent/back-end-services/python-agent-celery": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.25716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace our general end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.39587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " framework, or <em>back</em>-<em>end</em> <em>services</em>. If you don&#x27;t have one already, create a New Relic account. It&#x27;s free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The <em>Python</em> <em>agent</em> does not support Windows environments. <em>Python</em> <em>Python</em> (CPython"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.13852,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " monitoring to gain visibility into <em>end</em>-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the <em>Python</em> <em>agent</em> with our data explorer to organize, query"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/python-agent/configuration/python-agent-configuration": [
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.65348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. <em>Agent</em> <em>configuration</em>, initialization, shutdown These calls help you manage <em>Python</em> <em>agent</em> behavior, such as initializing and integrating"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.52266,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "application_settings (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Using an IF statement",
        "Passing results into dict"
      ],
      "title": "application_settings (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "a27dc4295c06752231333f790679c63c9931ce0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/applicationsettings-python-agent-api/",
      "published_at": "2021-12-15T00:10:47Z",
      "updated_at": "2021-10-23T18:40:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application_settings(name=None) Copy Returns an application settings object. Description This returns a reference to the application settings object. The global_settings object contains settings in the configuration file and environment variables; this application_settings object additionally includes configuration changes set server-side via the New Relic UI. The returned settings are nested, hierarchical objects and the setting names match the names in the agent configuration file. The main reason to expose the application settings is if you want your instrumentation to reference the agent-specific local configuration and not what's set server-side. If the name value is not set, the call uses the application name specified in the agent config file or via the NEW_RELIC_APP_NAME environment variable. If the application hasn't been registered with the data collector when this call is made, it returns the value None. When a call is successfully made and returns values, it will reflect the values of any local configuration overlaid with the server-side configuration for that application obtained during registration. Important Do not make any changes to the application settings object. Do not cache the settings object because it will be invalidated and replaced if a server-side config change causes the agent to re-register the application with the data collector. Parameters Parameter Description name string Optional. The name of the application. If not set, the name matches the name set in the Python agent configuration for that application. Return values Returns an application settings object. The object itself does not present any public API; some other calls require it to be passed. Examples Using an IF statement You might want to check the configuration settings to determine what custom instrumentation to implement. Here's an example of using an if statement with the app settings object: settings = newrelic.agent.application_settings() if settings and settings.error_collector.enabled: ... Copy Passing results into dict If you are debugging or logging and require the global settings as a traditional Python dictionary object, you can pass the result into a dict. For example: settings_dict = dict(newrelic.agent.application_settings()) for name, value in settings_dict.items(): print name, value Copy Each name will be the full dotted path for that setting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.221794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application_settings (<em>Python</em> <em>agent</em> API)",
        "sections": "application_settings (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ", the name matches the name set in the <em>Python</em> <em>agent</em> <em>configuration</em> for that application. Return values Returns an application settings object. The object itself does not present any public API; some other calls require it to be passed. Examples Using an IF statement You might want to check"
      },
      "id": "617db778196a67f30ff7cff3"
    }
  ],
  "/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.36493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python custom instrumentation",
        "Instrumentation via Config file or API",
        "Additional considerations",
        "Caution"
      ],
      "title": "Python custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "ebc00c6b0e9606add02a8deed86b56db2eedb78c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation/",
      "published_at": "2021-12-14T20:43:45Z",
      "updated_at": "2021-10-23T23:38:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom instrumentation allows you to expand the agent's default monitoring and behavior to target additional functional calls and activity. You can do so via the agent config file, or via the agent API. Instrumentation via Config file or API There are two main methods for adding custom instrumentation: If you simply want to trace time spent in additional functions or methods of classes, you can identify a list of functions or methods in the agent configuration file. For more information, see Instrumentation via config file. For more complex cases, or if you want to customize how the function is identified in the New Relic One UI, you can place API calls in your application code. For more information, see Instrumentation via API. In either case, these mechanisms only target the designated function call. It is not recursive, nor does it enable full profiling below the annotated function. Additional considerations You must individually annotate each function call you want to trace. If you are not sure which function you should annotate, you can use thread profiling features to narrow it down. Caution Collecting too many metrics can impact the performance of both your application and the agent. To avoid potential data problems, try to keep the total number of unique metrics introduced by custom instrumentation under 2000.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.11914,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "<em>Custom</em> <em>instrumentation</em> allows you to expand the <em>agent</em>&#x27;s default monitoring and behavior to target additional functional calls and activity. You can do so via the <em>agent</em> config file, or via the <em>agent</em> API. <em>Instrumentation</em> via Config file or API There are two main methods for adding <em>custom</em>"
      },
      "id": "617db639e7b9d23438c05661"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.795044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually <em>instrument</em> an unsupported framework or third-party system. Add <em>instrumentation</em> to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    }
  ],
  "/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.36491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python custom instrumentation via config file",
        "Listing functions in the configuration file",
        "Using dumbdbm",
        "Restrictions on wrapping extension APIs",
        "Overriding the reported function name",
        "Instrument with the API"
      ],
      "title": "Python custom instrumentation via config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "838aaf9fed371b7fff117f8732a92dbd6b8eb0a2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file/",
      "published_at": "2021-12-14T20:43:37Z",
      "updated_at": "2021-10-23T23:37:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can extend the Python agent's monitoring to trace time spent in additional functions or methods of classes by modifying your configuration file. This form of custom instrumentation is simpler to implement than API calls, and does not require you to modify your code. However, for more complex needs, you may need to implement Python instrumentation by API. Listing functions in the configuration file To extend instrumentation to designated functions and class methods, add them to the transaction_tracer.function_trace setting within the newrelic section of the agent configuration file. The identifier for a function should have the form module:function and that of a class method module:class.function. Using dumbdbm In this example, you use the Python dumbdbm module and want to instrument the time it took to open a database, and then to write that database back to a file. In this case you would use: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy To list more than one item, use either of these methods: One line: Separate each item with a space. Multiple lines: Follow the ini file convention to indent the subsequent lines. When data is reported for the instrumented function, the metric will have a name in the form Function/module:function or Function/module:class.function. In the performance breakdown for a transaction, the category will show as Function and the segment will be module:function or module:class.function. For slow transaction traces, only the segment name appears. Note that where a function is actually returning a generator, only the time spent in returning the generator will be recorded and not the consumption of the values from the generator. Restrictions on wrapping extension APIs When wrapping functions by listing them in the agent configuration file, you cannot designate class methods this way when the method is a member of a class which is implemented in C code by a C extension module. This is because it is not possible to modify the method table of a type implemented using the Python C API. Overriding the reported function name When using the transaction_tracer.function_trace setting in the agent configuration file, the name of the function will be used in the metric name, with it being classified as a Function. If it is necessary to override what function name may be used in the metric name or classify it differently, then an alternate means of defining the function trace in the configuration file can be used. The equivalent for: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy would be to create two new configuration sections in the agent configuration file, one for each function to be traced: [function-trace:dumbdbm-1] enabled = true function = dumbdbm:open name = dumbdbm:open group = Function [function-trace:dumbdbm-2] enabled = true function = dumbdbm:_Database._commit name = dumbdbm:_Database._commit group = Function Copy The ini file section name should start with function-trace:. The name component that follows that prefix can be anything but should be unique across all function trace sections in the configuration file. The group and name settings can be overridden as necessary to arrive at the desired metric name. The enabled setting defaults to false and needs to be set to true to enable the function trace. Instrument with the API For simple custom instrumentation purposes, the config file method works well. For more precise and customized instrumentation and agent behavior adjustments, you will want to use the Python agent API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.11908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and needs to be set to true to enable the function trace. <em>Instrument</em> with the API For simple <em>custom</em> <em>instrumentation</em> purposes, the config file method works well. For more precise and customized <em>instrumentation</em> and <em>agent</em> behavior adjustments, you will want to use the <em>Python</em> <em>agent</em> API."
      },
      "id": "617db639196a67933df7c47d"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.79503,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually <em>instrument</em> an unsupported framework or third-party system. Add <em>instrumentation</em> to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/apm-agent-security-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.8274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-19T16:46:03Z",
      "updated_at": "2021-12-19T16:46:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 and v6.5.2 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Java 17 Agent v7.4.0 to current Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 15.4 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.49724,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-19T15:29:05Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.14326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " include: C SDK API Go <em>agent</em> API Java <em>agent</em> API .NET <em>agent</em> API Node.js <em>agent</em> API PHP <em>agent</em> API <em>Python</em> <em>agent</em> API Ruby <em>agent</em> API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.82736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-19T16:46:03Z",
      "updated_at": "2021-12-19T16:46:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 and v6.5.2 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Java 17 Agent v7.4.0 to current Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 15.4 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.49712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-19T15:29:05Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.14314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " include: C SDK API Go <em>agent</em> API Java <em>agent</em> API .NET <em>agent</em> API Node.js <em>agent</em> API PHP <em>agent</em> API <em>Python</em> <em>agent</em> API Ruby <em>agent</em> API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/instrumented-python-packages": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.82736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-19T16:46:03Z",
      "updated_at": "2021-12-19T16:46:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 and v6.5.2 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Java 17 Agent v7.4.0 to current Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 15.4 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.49712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-19T15:29:05Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.14314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " include: C SDK API Go <em>agent</em> API Java <em>agent</em> API .NET <em>agent</em> API Node.js <em>agent</em> API PHP <em>agent</em> API <em>Python</em> <em>agent</em> API Ruby <em>agent</em> API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-19T16:46:03Z",
      "updated_at": "2021-12-19T16:46:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 and v6.5.2 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Java 17 Agent v7.4.0 to current Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 15.4 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-19T15:29:05Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.14302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " include: C SDK API Go <em>agent</em> API Java <em>agent</em> API .NET <em>agent</em> API Node.js <em>agent</em> API PHP <em>agent</em> API <em>Python</em> <em>agent</em> API Ruby <em>agent</em> API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring"
      },
      "id": "609fa5cf196a67066022b194"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace our general end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.12577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list"
      },
      "id": "61749d1864441fd01a5fd02d"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/install-python-agent-gae-flexible-environment": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.70068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.64001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-12-15T00:08:00Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-heroku": [
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.64001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-12-15T00:08:00Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "5efebf6863dfb657455623684a5c51813994c0fb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-12-15T00:08:40Z",
      "updated_at": "2021-10-23T23:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.5257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "617db6a1e7b9d24953c0554b"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-openshift": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.70068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-12-15T00:08:00Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "5efebf6863dfb657455623684a5c51813994c0fb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-12-15T00:08:40Z",
      "updated_at": "2021-10-23T23:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.52568,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "617db6a1e7b9d24953c0554b"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-stackato": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.70068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.64001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "5efebf6863dfb657455623684a5c51813994c0fb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-12-15T00:08:40Z",
      "updated_at": "2021-10-23T23:42:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.52568,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "617db6a1e7b9d24953c0554b"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-webfaction": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.70067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.64001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-12-15T00:08:00Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    }
  ],
  "/docs/apm/agents/python-agent/index": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.05621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.413734,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.62068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/advanced-install-new-relic-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.089294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.38041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.25144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/installation/install-python-agent-docker": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.089294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.38041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.25144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/installation/python-agent-admin-script-advanced-usage": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.08928,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.3804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.2514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/installation/python-agent-advanced-integration": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.08928,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.3804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.2514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/installation/standard-python-agent-install": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.08926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.25136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.256744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    }
  ],
  "/docs/apm/agents/python-agent/installation/uninstall-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.08926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.3804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.25136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/installation/update-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.08923,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Standard installation",
        "View logs for your APM and infrastructure data",
        "Other options"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "2671fa33c894ce323c030bdf840cf3fc8bbfb696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-12-14T20:44:37Z",
      "updated_at": "2021-11-15T04:15:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: If you haven't already, create a New Relic account. It's free, forever. Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in the following: Google App Engine flexible environment. AWS Lambda For more information, see Compatibility and requirements.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.38039,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Add <em>Python</em> data Standard <em>installation</em> These instructions"
      },
      "id": "617db6d964441f0b93fbc64a"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.25131,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " procedure. If you installed to a different directory, this information might not apply. APM <em>agents</em> The <em>agent</em> root directory depends on the <em>agent</em> you&#x27;re using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an <em>installation</em> tool or script. The &quot;root directory"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/acceptdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75803,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/acceptdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomparameter-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomparameters-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomspanattribute-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/application-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60793,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75798,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/applicationsettings-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60793,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75798,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/asgiapplication-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60791,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.60791,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/callablename-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.6079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/capturerequestparams-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.6079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/createdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/currenttransaction-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.7504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74998,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datasourcegenerator-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datastoretrace-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59912,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/endoftransaction-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/externaltrace-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.75055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/functiontrace-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59222,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74377,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getlinkingmetadata-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.5922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.3175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/globalsettings-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74373,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-12-14T23:00:37Z",
      "updated_at": "2021-12-14T23:00:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Important Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:func* or module:class.*. Requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.05548,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-15T00:07:15Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.40395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.61163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/ignoretransaction-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/initialize-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/insertdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/messagetrace-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/messagetransaction-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/noticeerror-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/python-agent-api-different-call-forms": [
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.80675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "Collect custom attributes",
        "Requirements",
        "APM: Record custom attributes",
        "Important",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Browser monitoring: Record custom attributes",
        "Infrastructure monitoring: Record custom attributes",
        "Mobile monitoring: Record custom attributes"
      ],
      "title": "Collect custom attributes",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "7846d880f26b781fa470615c73cf7365b24b625d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/collect-custom-attributes/",
      "published_at": "2021-12-15T21:28:08Z",
      "updated_at": "2021-12-14T03:51:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For some New Relic solutions, one way to report custom data to New Relic is to use custom attributes. For example, for New Relic browser monitoring, you might create a custom attribute to track the user name associated with a slow or failing request. Requirements Custom attributes are available for these New Relic solutions: APM Browser monitoring Mobile monitoring Infrastructure monitoring For other custom data solutions, see Intro to custom data. APM: Record custom attributes Important Review the list of reserved terms used by NRQL. Using reserved terms can cause issues. To enable and use custom attributes for APM, follow the procedure for your APM agent: C SDK To add custom attributes to applications monitored by the C SDK, call one of the attribute functions; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function. Go Custom attribute collection is enabled by default in the Go agent. However, you can disable custom attribute collection. Java Custom attribute collection is enabled by default in Java. You can collect custom attributes using XML and the Java agent APIs. These two methods can be used in conjunction with each other. Method How to do it Specify attributes in XML XML allows you to specify custom attributes without changing any of your source code. You can have multiple XML files for custom attributes that are grouped by some logical facet. To set custom attributes for your Java app via XML: Review the New Relic Java agent's documentation about XML file format, methods and classes, and examples. From your Extensions directory within the New Relic Java agent, create a single XML file. Define the methods you want New Relic to monitor by editing your XML file directly. Define an XML instrumentation file using the New Relic UI. This may require additional config in the common: block of your newrelic.yml. See Report custom attributes under Instrumentation options for more detail. Call the agent's API Example 1: Adding custom attributes to transactions To collect custom attributes using the agent's API, call the relevant methods: For each method you want to record an attribute for, call NewRelic.addCustomParameter(...). Optional: Include or exclude certain attributes with attributes.include and attributes.exclude. For example, to record a variable named userId, include this code in the parent method: NewRelic.addCustomParameter(\"userId\", userId); Copy Example 2: Adding custom attributes to spans in distributed traces To collect custom attributes using the agent's API, call the relevant methods: For each span (currently executing method) that you want to record an attribute for, call NewRelic.getAgent().getTracedMethod().addCustomAttribute(...). Optional: Include or exclude certain attributes with span_events.attributes.include and span_events.attributes.exclude. For example, to record a variable named userId on the current span, include this code in the associated method: NewRelic.getAgent().getTracedMethod().addCustomAttribute(\"userId\", userId); Copy Collect user attributes The Java agent also includes a built-in mechanism to enable user attributes and collect user information from HttpServletRequest.getUserPrincipal() as custom attributes. .NET Custom attribute collection is enabled by default in .NET. To collect custom attributes, call the relevant API methods: For each method for which you want to record an attribute, call AddCustomAttribute. Optional: Include or exclude attributes with the include and exclude configuration options. For example, to record attributes for a coupon code (string) and an item ID code (number), you could include this code in the parent method: IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction .AddCustomAttribute(\"Discount Code\", \"Summer Super Sale\") .AddCustomAttribute(\"Item Code\", 31456); Copy Node.js Custom attribute collection is enabled by default in Node.js. To collect custom attributes, call the relevant API method: For each attribute you want to record, call newrelic.addCustomAttribute. To record multiple attributes using a single call, use newrelic.addCustomAttributes. For example, to record attributes for a coupon code and an item ID code, you could include this in the parent method: newrelic.addCustomAttributes({ \"Discount Code\": \"Summer Super Sale\", \"Item Code\": 31456 }); Copy PHP Custom attribute collection is enabled by default in PHP. To collect custom attributes, call the relevant API method for each method that you want to record an attribute; newrelic_add_custom_parameter for transaction events and spans newrelic_add_custom_span_parameter for only spans For example, to record a variable named $userId, include this code in the parent method: newrelic_add_custom_parameter ('userID', $userId) Copy Python Custom attribute collection is enabled by default in Python. To collect custom attributes, call add_custom_parameter for each method that you want to record an attribute. For example, to record a variable named user_id, include this code in the parent method: newrelic.agent.add_custom_parameter('user_id', user_id) Copy Ruby Custom attribute collection is enabled by default in Ruby. To collect custom attributes, call the relevant API methods: For Ruby agent version 3.12.0 or higher, use the add_custom_attributes method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_attributes({ user_id: @user.id }) Copy For Ruby agent version 3.11.2 or lower, use the add_custom_parameters method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_parameters({ user_id: @user.id }) Copy Browser monitoring: Record custom attributes The browser agent provides an API to specify extra details associated with a page view or browser interaction, either by forwarding attributes from APM to browser monitoring or by specifying custom attributes through JavaScript. Values forwarded from the APM agent are encoded and injected into browser attributes by our browser agent. Infrastructure monitoring: Record custom attributes Our Infrastructure monitoring lets you create custom attributes that are used to annotate the data from the infrastructure agent. You can use this metadata to build filter sets, group your results, and annotate your data. Mobile monitoring: Record custom attributes Mobile agents include API calls to record custom attributes: For an overview of mobile monitoring custom data, see Insert custom events and attributes Android method: setAttribute iOS method: setAttribute",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.76858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em>",
        "body": " an XML instrumentation file using the New Relic UI. This may require additional config in the common: block of your newrelic.yml. See Report custom attributes under Instrumentation options for more detail. <em>Call</em> the <em>agent</em>&#x27;s <em>API</em> Example 1: Adding custom attributes to transactions To collect custom"
      },
      "id": "603eb9a3196a67a990a83da5"
    },
    {
      "sections": [
        "Find root directory of New Relic agents",
        "Tip",
        "APM agents",
        "C SDK",
        "Go agent",
        "Java agent",
        ".NET Core 2.0 agent",
        ".NET Framework agent",
        "Node.js agent",
        "PHP agent",
        "Python agent",
        "Ruby agent",
        "Mobile agent",
        "Infrastructure agent",
        "On-host integrations",
        "Cloud integrations",
        "Directory info for other tools"
      ],
      "title": "Find root directory of New Relic agents",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "72a2de167791abd5b6d91ff56b94dbc16c40f302",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/find-agent-root-directory/",
      "published_at": "2021-12-19T22:49:20Z",
      "updated_at": "2021-12-14T04:16:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require installation of an agent. The agent root directory is the main folder that holds the files for the agent. Typically, the agent root directory is the directory where the agent install process places the agent configuration file. You may need to find the agent root directory for several reasons: To customize your configuration file. To run New Relic Diagnostics. To install, update, or uninstall the agent. To troubleshoot if no data appears in the New Relic UI. Tip These strategies for finding the root directory are applicable if you followed the default install procedure. If you installed to a different directory, this information might not apply. APM agents The agent root directory depends on the agent you're using: C SDK The C SDK may not necessarily be installed in a single place, and it does not have an installation tool or script. The \"root directory\" depends on what the user does. In general, the root directory is the location of the libnewrelic.so or libnewrelic.a library file as well as the location of the libnewrelic.h file. Go agent The Go agent root directory is the root directory of your app, where you imported the go-agent package when you installed the Go agent. Java agent The Java agent root directory is called newrelic, which you created in your app server's root directory when you installed the Java agent. .NET Core 2.0 agent The location of the .NET Core 2.0 agent root directory depends on your system: System Location of the agent root directory Windows Look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Linux The location of the agent root directory is /usr/local/newrelic-netcore20-agent. You can also look in the CORECLR_NEWRELIC_HOME environment variable for your application to find the location of the agent root directory. Docker In the root directory for your app, look for the agent root directory called NewRelic, which you created when you installed the Core 2.0 agent with Docker. .NET Framework agent The location of the .NET Framework agent root directory is C:\\Program Files\\New Relic\\.NET Agent. Node.js agent The Node.js agent root directory is the root directory of your app, where you copied newrelic.js when you installed the Node.js agent. PHP agent The location of the PHP agent root directory depends on how you installed the agent: Installation method Root directory location With a package manager or tar archive Use phpinfo() and look in the sections called Scan this dir for additional .ini files or Additional .ini files parsed for the location of the newrelic.ini file. This file will be in the agent root directory, which is called newrelic-php5. Tip The PHP agent root directory is called newrelic-php5 for all supported PHP versions, including PHP 7. With a configuration system, like Puppet or Chef To find all of the locations where the PHP agent was installed, check the NR_INSTALL_PHPLIST environment variable for a list of agent root directories. Python agent You can install the Python agent anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() API call. To find the location of the agent config file, look in the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.agent.initialize() call for the path to the agent root directory. Ruby agent The location of the Ruby agent root directory depends on how you installed the agent: Installation method Root directory location With the newrelic_rpm gem The Ruby agent root directory is in the root directory of your app in a directory called config. Without the gem Look in the NEW_RELIC_CONFIG_PATH environment variable for the path to the agent root directory. If there isn't a path in that environment variable, check the following directories to find the one that contains the newrelic.yml file: config $HOME/.newrelic/ $HOME/ Mobile agent The mobile agent root directory is the root directory of your app. Infrastructure agent The location of the infrastructure agent root directory depends on your system: Infrastructure agent System Root directory location Windows C:\\Program Files\\New Relic\\newrelic-infra\\ Linux, Docker, and Elastic Beanstalk /etc On-host integrations The location of the root directory for on-host integrations is /etc. Cloud integrations Because cloud integrations are not installed but are connected to our infrastructure monitoring through your cloud service provider, there is not a root directory specific to cloud integrations. Directory info for other tools For learning about directories for other tools not listed here, see the documentation for a specific solution .",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.56108,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find root directory of New Relic <em>agents</em>",
        "sections": "<em>Python</em> <em>agent</em>",
        "body": " for a list of <em>agent</em> root directories. <em>Python</em> <em>agent</em> You can install the <em>Python</em> <em>agent</em> anywhere on your host system and then supply a path to it through the NEW_RELIC_CONFIG_FILE environment variable or the newrelic.<em>agent</em>.initialize() <em>API</em> <em>call</em>. To find the location of the <em>agent</em> config file, look"
      },
      "id": "61bfb6f028ccbcb17be52a87"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustomevent-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.5921,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74367,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "data_source_factory (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "data_source_factory example"
      ],
      "title": "data_source_factory (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "6e86c1826753eb0802cd77910435a76281d5413b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api/",
      "published_at": "2021-12-14T20:45:23Z",
      "updated_at": "2021-10-31T13:16:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax data_source_factory(name=None, **properties) Copy Wraps a data source defined as a factory. Description The data source APIs provide a way to generate metric timeslice data using a pull-style API rather than the push-style API implemented by record_custom_metric. For more about why and how to use data sources for custom metrics, see Custom metric data sources. The data_source_factory decorator wraps a data source defined as a factory. The decorator can be applied to a class or a function. The class constructor or function must accept arguments of settings (configuration settings for the data source) and environ (information about context in which the data source is being used). The resulting object must be a callable which directly returns an iterable/generator with the metrics for each sample. Parameters Parameter Description name string Optional. The name of the data source. This is used only for logging purposes. If not provided, it defaults to the callable name derived from the decorated function. properties dictionary Optional. Any additional properties to pass to the data source factory. The possible fields for a dictionary are: count total min max sum_of_squares Return values Returns a function. Examples data_source_factory example An example: import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = None self.times = None def start(self): self.last_timestamp = time.time() self.times = os.times() def stop(self): self.last_timestamp = None self.times = None def __call__(self): if self.times is None: return now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "data_source_factory (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "data_source_factory (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax data_source_factory(name=None, **properties) Copy Wraps a data source defined as a factory. Description The data source APIs provide a way to generate metric timeslice data using a pull-style <em>API</em> rather than the push-style <em>API</em> implemented by record_custom_metric. For more about why and how"
      },
      "id": "617e973d64441ff7f0fbd968"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustommetrics-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.5921,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74367,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordexception-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/registerapplication-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/registerdatasource-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/setbackgroundtask-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.7436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.7436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-12-14T22:33:20Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.59204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "See related logs",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "11925e977498546a1c379ac33f865afb2f94a5c1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api/",
      "published_at": "2021-12-14T23:08:49Z",
      "updated_at": "2021-11-25T15:55:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. See related logs To see logs directly within the context of your application's errors and traces, use the get_linking_metadata API call to annotate your logs. For more information about correlating log data with other telemetry data, see our logs in context documentation. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.74359,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "619fb1ea64441f8d8d984c5a"
    },
    {
      "sections": [
        "record_custom_metric (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Recording a custom metric using the application object"
      ],
      "title": "record_custom_metric (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c5412d16791975081a165fcb8248944e76687311",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api/",
      "published_at": "2021-12-14T20:47:50Z",
      "updated_at": "2021-10-31T13:28:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric. There are no restrictions on naming formats, but we recommends you use a Custom/ prefix for your custom metric names. This helps you differentiate custom metrics from default-monitored metrics in the our UI, and also helps you troubleshoot if necessary. value int or dict Required. The numeric value of the metric. Can be an integer, a float, or a dictionary of values. The possible fields for a dictionary are: count total min max sum_of_squares application application object Optional. The application object corresponding to the app with which you want to associate the metrics. If the application is the default value of None, the agent records the custom metrics to the app associated with the current transaction. Thus, you should provide the application unless this method is used in code for a web transaction or background task. Return values None. Examples Recording a custom metric using the application object To record custom metrics from a distinct background thread or other code, you must pass the application object corresponding to the application to which the custom metrics are to be reported. import newrelic.agent application = newrelic.agent.application() newrelic.agent.record_custom_metric('Custom/my_favorite_number', 42, application) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_custom_metric (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_custom_metric(name, value, application=None) Copy Records a single custom metric. Description This call records a single custom metric. To record a set of metrics, see record_custom_metrics. Parameters Parameter Description name string Required. Name of the metric"
      },
      "id": "617e99f128ccbc65437ff03c"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-12-14T20:52:22Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.21512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    },
    {
      "sections": [
        "Python custom metrics",
        "Important",
        "Charting custom metrics",
        "Push versus pull interfaces",
        "Recording a single metric",
        "Recording multiple metrics",
        "Naming of custom metrics",
        "Pre-aggregated metrics",
        "Custom metric data sources",
        "Registering a data source",
        "Initialization of a data source",
        "Instances of a data source",
        "Life cycle of a data source",
        "Configuring a data source",
        "Setup from configuration file"
      ],
      "title": "Python custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "f9a53099356096d43e66677875a5d909a2fbf340",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-custom-metrics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-30T21:56:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the Python agent. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application. Recommendation: To avoid potential data problems, keep the total number of unique metrics introduced by custom metrics under 2000. Important Before using custom metrics, you must get the agent initialized and integrated with the target process. For instructions, see Python agent integration. Charting custom metrics To view custom metrics, query your data to search metrics and create customizable charts. Push versus pull interfaces The Python agent provides two different ways of recording custom metrics. The first is a push-style API where you can decide when to record a custom metric. The second is a pull-style API where you register a custom metric data source, and the agent polls your code for metrics once per harvest cycle. The pull-style API is important where you need to generate rate or utilization metrics over the period of the harvest cycle. This is because you can properly calculate the duration of the harvest cycle and also ensure that only one metric is recorded for the harvest cycle. Recording a single metric To record a single custom metric, the Python agent provides the function: newrelic.agent.record_custom_metric(name, value, application=None) Copy When called without an application object as newrelic.agent.record_custom_metric('Custom/Value', value) Copy then it must be called within the context of a transaction that is being monitored by the agent. This is because the current transaction will be looked up and the custom metrics will initially be attached to that transaction. So long as the transaction is not subsequently marked to be ignored, the custom metrics will then be aggregated with other metrics for the application the transaction is being reported to, when the transaction completes. If this API function is called outside of the context of a monitored transaction, such as in a background thread (which isn't being tracked as a background task), then the call does nothing and the data is discarded. In order to be able to record custom metrics in such a situation, it is necessary to supply the application object corresponding to the application against which the custom metrics should be recorded. application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metric('Custom/Value', value(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy In the case of recording custom metrics against the current transaction (by not supplying an application object), no thread locking is required at the time of the API call, as the custom metrics will be attached to the transaction object initially. It is only when the whole transaction is being recorded at completion that a thread lock needs to be acquired. This is the same lock though as needs to be acquired to merge all metrics from the transaction with the metric table for the current harvest cycle. So, no additional locking is required on top of what is already required. Where the API call is being supplied the application object however, it is necessary to acquire a lock for each call to record a custom metric. Recording metrics one at a time in this way for a large number of metrics may therefore have undue effects due to thread lock contention. Recording multiple metrics If you are recording multiple metrics in one go, to reduce the need for thread locking you can instead use the function: newrelic.agent.record_custom_metrics(metrics, application=None) Copy This works the same way as the record_custom_metric() call except that an iterable can be provided in place of the name and value arguments. The iterable can be a list, tuple or other iterable object, including a generator function. The iterable must return a tuple consisting of the name and value for the custom metric. import psutil import os def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metrics(memory_metrics(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy When used with an application object, no matter how many custom metrics are being recorded, thread locking will only need to be performed once for each call. Naming of custom metrics All custom metrics reported by the Python agent should start with the prefix Custom/. This would typically be followed with a category name and label segment. If the Custom/ metric is not used, then the custom metrics may not be available for selection in the Data explorer. Pre-aggregated metrics When recording a set of metrics by passing an iterable over the set of available metrics, the same named metric may appear more than once. In this situation the agent would then aggregate the indvidual values into one sample. Although possible, if retaining and then later passing all the individual raw samples for a single metric in this way is not practical, then the source of the metrics can instead pre aggregate metrics and provide the resulting aggregrated data sample. Instead therefore of the value being a numerical value, a dictionary would be passed for the value. The fields within the dictionary would be: count total min max sum_of_squares An implementation of a helper class that you could use to perform aggregation for a single metric is: class Stats(dict): def __init__(self, count=0, total=0.0, min=0.0, max=0.0, sum_of_squares=0.0): self.count = count self.total = total self.min = min self.max = max self.sum_of_squares = sum_of_squares def __setattr__(self, name, value): self[name] = value def __getattr__(self, name): return self[name] def merge_stats(self, other): self.total += other.total self.min = self.count and min(self.min, other.min) or other.min self.max = max(self.max, other.max) self.sum_of_squares += other.sum_of_squares self.count += other.count def merge_value(self, value): self.total += value self.min = self.count and min(self.min, value) or value self.max = max(self.max, value) self.sum_of_squares += value ** 2 self.count += 1 Copy This class is itself a dictionary and so an instance of it can be passed directly as the value. This might then be used as: application = newrelic.agent.register_application() def sample_value(): return ... def report_custom_metrics(): count = 0 stats = Stats() while True: count += 1 stats.merge_value(sample_value()) if count % 60 == 0: newrelic.agent.record_custom_metric('Custom/Value', stats, application) stats = Stats() time.sleep(1.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy Custom metric data sources The record_custom_metric() and record_custom_metrics() API calls still require explicit action on your part to push custom metrics to the agent. Pushing data to the agent, especially if being done from a background thread and done on a 60 second interval, can be problematic though. This is because when the data is pushed it may not sync precisely with when the agent is reporting data back to the data collector. If a background thread was pre aggregating metrics over a 60 second period and then recording them, if that falls close to the time when the agent is reporting data, it could occur either just before or just after the agent reports the data. This lack of synchronization in time could therefore result in no metrics for that sample being reported in one harvest cycle and two in the next, where as the intent would be that there is one per harvest cycle. The solution to this is for the agent to pull custom metrics from the producer of the metrics as part of the process of reporting data to ensure they will be reported immediately and synchronised with the harvest cycle. The source of such metrics in this pull-style API is called a metric data source. Registering a data source The API function for registering a metric data source is: newrelic.agent.register_data_source(source, application=None, name=None, settings=None, **properties) Copy Because of varying requirements around how custom metrics may need to be produced, a number of different ways are available of implementing the data source. The simplest type of data source is one which is providing a gauge metric. That is one where some value at that particular point in time is relevant and what has happened historically doesn't matter. import psutil import os @newrelic.agent.data_source_generator(name='Memory Usage') def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) newrelic.agent.register_data_source(memory_metrics) Copy The decorator used here is: newrelic.agent.data_source_generator(name=None, **properties) Copy It is specifically for wrapping a generator function, or a function which otherwise returns an iterable when called. The name when registering a data source is optional. It exists mainly so that when logging errors the message can give a more recognisable name for the data source. If name isn't passed to register_data_source(), then any name associated with the actual data source using the decorator will be used instead, or the name of the function if the data source itself is not named. If an application object is not provided when registering a data source, then the data source will be automatically associated with all applications for which data is being reported by the agent in that process. If an application is provided, the data source will only be associated with that specific application. Whether a data source is registered against an application explicitly or is applied to all applications, the agent needs to first be registered for that application. This would normally happen if using a data source in an existing web application process which was being monitored. If however you are using a data source in a standalone program to report only custom metrics, you still need to ensure that the API call register_application() is used if necessary to force the registration of the agent for an application before any data will be collected. Initialization of a data source Although the decorator provides the ability to name a data source, the more important reason for the decorator is that it hides the complexity of a sequence of setup steps to get a data source running. The sequence of these steps is: The data source is initialized, with a dictionary holding any configuration being passed to it to set it up to run in a particular way. Upon being initialized, the data source returns a dictionary of properties describing the data source. This includes a reference to a factory function for creating a specific instance of the data source provider. An instance of the data source provider is then created for a specific consumer (application) by calling the factory. The factory function is passed a dictionary describing the environment in which it is running, including the name of the consumer. Rewriting the above example so as to not rely on the decorator, we would have: import os import psutil def memory_metrics_data_source(settings): def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) def memory_metrics_factory(environ): return memory_metrics properties = {} properties['name'] = 'Memory Usage' properties['factory'] = memory_metrics_factory return properties newrelic.agent.register_data_source(memory_metrics_data_source) Copy The purpose of the more complex underlying protocol is to provide sufficient hook points to properly initialize data sources and customise them based on that configuration and the specifics of the consumer. Instances of a data source Nothing more needed to be done in the prior example because gauge metrics, which don't care about the last time they were generated, were being returned. Where a metric reflects something happening over time, and therefore needs to retain some state, we need though an ability to be able to create an instance of the data source. The factory function therefore provides the ability for an instance of a data source to be created for each application against which metrics are being reported. There is allowance for one instance of the data source per application rather than one per process, because the start and end times for the harvest cycle for different applications may be different. If there was only one per process in this scenario and the metric had a connection to the duration of the harvest cycle, then the resulting metrics wouldn't be correct for each application. The ability is therefore provided for a data source instance to be application specific. Using nested functions as above, a data source which needs to maintain state could therefore be written as. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') def cpu_metrics_data_source(settings, environ): state = {} state['last_timestamp'] = time.time() state['times'] = os.times() def cpu_metrics(): now = time.time() new_times = os.times() elapsed_time = now - state['last_timestamp'] user_time = new_times[0] - state['times'][0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) state['last_timestamp'] = now state['times'] = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) return cpu_metrics newrelic.agent.register_data_source(cpu_metrics_data_source) Copy The decorator used here is: newrelic.agent.data_source_factory(name=None, **properties) Copy For this case the decorator is wrapping a factory function. Because the decorator is automatically returning the properties for the data source when required, the factory takes both the settings and the description of the environ it is being used in. Using nested functions is a bit magic and requires the code to use a dictionary on the stack of the outer function to hold the state. The alternative is to implement the data source as an actual class with the decorator applied to the class. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = time.time() self.times = os.times() def __call__(self): now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy Life cycle of a data source Although a data source could produce metrics at any time, the agent itself isn't always reporting metrics for an application. Specifically, it will only start collecting metrics and report them once the agent has managed to register itself with the data collector for a specific application. This distinction is important for data sources which generate metrics based on a time period. It would be required to only have metrics produced by a data source to cover the period back to the point at which registration occurred, or back to the last time that metrics were reported by the agent. If this isn't done, the reported metrics will not align and so it will not be possible to ensure that they correlate properly with metrics from tracking of web transactions or background tasks. For this reason, the factory for a data source will only be called to create an instance of the data source when registration for the application has completed and metrics collection started. This ensures that any reference timestamp will be correct. If the agent run for a particular application is terminated, due to a server side forced restart resulting from server side configuration changes, or because of successive failures to report data to the data collector, then the data source will be dropped. A new instance of the data source will then be created when the agent has been able to reregister itself again for the application. The correct cleanup of a data source in this case will depend on prompt destruction of the data source object when it is dropped. Because of object reference count cycles, this cannot be relied upon. It is also desirable to avoid a data source needing to add a __del__() method in order to trigger cleanup actions because of the problems that a __del__() method introduces in the way of actually preventing prompt destruction of the object. For this reason, if a data source needs more control over setup and shutdown, including perhaps being able to stay persistent in memory and not be dropped, yet suspend calculations for metrics, then it can provide start() and stop() methods when being implemented as a class instance. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = None self.times = None def start(self): self.last_timestamp = time.time() self.times = os.times() def stop(self): self.last_timestamp = None self.times = None def __call__(self): if self.times is None: return now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('CPU/User Time', user_time) yield ('CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy With the start() and stop() methods defined, the instance of the data source will not be destroyed at the termination of the agent run but kept around. The agent at this point is then expecting that the data source will itself deal with the suspension of any aggregation of metrics, dropping any accumulated metrics and ensure that when the agent reregisters the application with the data collector and calls start() again, only then would tracking for metrics be resumed. Configuring a data source Data sources may not always be bound to one specific information source. It may be necessary to register a data source against different underlying information sources from which metrics are generated. In this case distinct settings can be passed when registering a data source using the register_data_source() function. When using a data factory, these settings will then be available when the data source is being initialized. @newrelic.agent.data_source_factory() class HostMonitorDataSource(object): def __init__(self, settings, environ): self.hostname = settings['hostname'] def __call__(self): ... newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-1)', settings=dict(hostname='host-1')) newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-2)', settings=dict(hostname='host-2')) Copy If provision of settings is optional, the data source should only attempt to access settings if the settings option is not None. Even if supplied a dictionary, it should also cope with missing settings in the dictionary. Setup from configuration file Although the examples here showed the use of the register_data_source() API call, this would not be the normal way by which data sources would be registered. This is not the preferred way as it would require modifications to the application to import the module for the data source and register it. Instead, the primary way for defining and integrating data sources into an existing monitored web application would be to list them in the agent configuration file. This entails adding an additional section in the agent configuration file for each data source with prefix data-source:: [data-source:process-info] enabled = true function = samplers.process_info:process_info_data_source Copy If registering a data source from the agent configuration file, there should be no separate registration for the same data source being performed using the register_data_source() function occuring in your application code or in the module defining the data source. If there is, then two instances of the data source would end up being registerd. If needing to provide specific settings for a data source, this can be done by creating a separate section in the agent configuration file and referring to the section name in the settings value in the data source configuration. [data-source:host-monitor] enabled = true function = samplers.process_info:process_info_data_source name = Host Monitor (host-1) settings = host-monitor:host-1 [host-monitor:host-1] hostname = host-1 Copy As data source settings supplied via the configuration file will always be passed as string values, it is recommended that even when using register_data_source() with application code to register a data source and provide settings explicitly, that strings be used for setting values. The data source should then deal with the conversion to a different type such as a numeric value or list of values.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.96126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> custom metrics",
        "sections": "<em>Python</em> custom metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the <em>Python</em> <em>agent</em>. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application"
      },
      "id": "617dbf9f196a67adbbf7dfa4"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-14T20:50:50Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-12-14T20:52:22Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.21512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-14T20:50:50Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-12-14T20:52:22Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.21512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-14T20:50:50Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Python custom metrics",
        "Important",
        "Charting custom metrics",
        "Push versus pull interfaces",
        "Recording a single metric",
        "Recording multiple metrics",
        "Naming of custom metrics",
        "Pre-aggregated metrics",
        "Custom metric data sources",
        "Registering a data source",
        "Initialization of a data source",
        "Instances of a data source",
        "Life cycle of a data source",
        "Configuring a data source",
        "Setup from configuration file"
      ],
      "title": "Python custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "f9a53099356096d43e66677875a5d909a2fbf340",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-custom-metrics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-30T21:56:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the Python agent. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application. Recommendation: To avoid potential data problems, keep the total number of unique metrics introduced by custom metrics under 2000. Important Before using custom metrics, you must get the agent initialized and integrated with the target process. For instructions, see Python agent integration. Charting custom metrics To view custom metrics, query your data to search metrics and create customizable charts. Push versus pull interfaces The Python agent provides two different ways of recording custom metrics. The first is a push-style API where you can decide when to record a custom metric. The second is a pull-style API where you register a custom metric data source, and the agent polls your code for metrics once per harvest cycle. The pull-style API is important where you need to generate rate or utilization metrics over the period of the harvest cycle. This is because you can properly calculate the duration of the harvest cycle and also ensure that only one metric is recorded for the harvest cycle. Recording a single metric To record a single custom metric, the Python agent provides the function: newrelic.agent.record_custom_metric(name, value, application=None) Copy When called without an application object as newrelic.agent.record_custom_metric('Custom/Value', value) Copy then it must be called within the context of a transaction that is being monitored by the agent. This is because the current transaction will be looked up and the custom metrics will initially be attached to that transaction. So long as the transaction is not subsequently marked to be ignored, the custom metrics will then be aggregated with other metrics for the application the transaction is being reported to, when the transaction completes. If this API function is called outside of the context of a monitored transaction, such as in a background thread (which isn't being tracked as a background task), then the call does nothing and the data is discarded. In order to be able to record custom metrics in such a situation, it is necessary to supply the application object corresponding to the application against which the custom metrics should be recorded. application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metric('Custom/Value', value(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy In the case of recording custom metrics against the current transaction (by not supplying an application object), no thread locking is required at the time of the API call, as the custom metrics will be attached to the transaction object initially. It is only when the whole transaction is being recorded at completion that a thread lock needs to be acquired. This is the same lock though as needs to be acquired to merge all metrics from the transaction with the metric table for the current harvest cycle. So, no additional locking is required on top of what is already required. Where the API call is being supplied the application object however, it is necessary to acquire a lock for each call to record a custom metric. Recording metrics one at a time in this way for a large number of metrics may therefore have undue effects due to thread lock contention. Recording multiple metrics If you are recording multiple metrics in one go, to reduce the need for thread locking you can instead use the function: newrelic.agent.record_custom_metrics(metrics, application=None) Copy This works the same way as the record_custom_metric() call except that an iterable can be provided in place of the name and value arguments. The iterable can be a list, tuple or other iterable object, including a generator function. The iterable must return a tuple consisting of the name and value for the custom metric. import psutil import os def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metrics(memory_metrics(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy When used with an application object, no matter how many custom metrics are being recorded, thread locking will only need to be performed once for each call. Naming of custom metrics All custom metrics reported by the Python agent should start with the prefix Custom/. This would typically be followed with a category name and label segment. If the Custom/ metric is not used, then the custom metrics may not be available for selection in the Data explorer. Pre-aggregated metrics When recording a set of metrics by passing an iterable over the set of available metrics, the same named metric may appear more than once. In this situation the agent would then aggregate the indvidual values into one sample. Although possible, if retaining and then later passing all the individual raw samples for a single metric in this way is not practical, then the source of the metrics can instead pre aggregate metrics and provide the resulting aggregrated data sample. Instead therefore of the value being a numerical value, a dictionary would be passed for the value. The fields within the dictionary would be: count total min max sum_of_squares An implementation of a helper class that you could use to perform aggregation for a single metric is: class Stats(dict): def __init__(self, count=0, total=0.0, min=0.0, max=0.0, sum_of_squares=0.0): self.count = count self.total = total self.min = min self.max = max self.sum_of_squares = sum_of_squares def __setattr__(self, name, value): self[name] = value def __getattr__(self, name): return self[name] def merge_stats(self, other): self.total += other.total self.min = self.count and min(self.min, other.min) or other.min self.max = max(self.max, other.max) self.sum_of_squares += other.sum_of_squares self.count += other.count def merge_value(self, value): self.total += value self.min = self.count and min(self.min, value) or value self.max = max(self.max, value) self.sum_of_squares += value ** 2 self.count += 1 Copy This class is itself a dictionary and so an instance of it can be passed directly as the value. This might then be used as: application = newrelic.agent.register_application() def sample_value(): return ... def report_custom_metrics(): count = 0 stats = Stats() while True: count += 1 stats.merge_value(sample_value()) if count % 60 == 0: newrelic.agent.record_custom_metric('Custom/Value', stats, application) stats = Stats() time.sleep(1.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy Custom metric data sources The record_custom_metric() and record_custom_metrics() API calls still require explicit action on your part to push custom metrics to the agent. Pushing data to the agent, especially if being done from a background thread and done on a 60 second interval, can be problematic though. This is because when the data is pushed it may not sync precisely with when the agent is reporting data back to the data collector. If a background thread was pre aggregating metrics over a 60 second period and then recording them, if that falls close to the time when the agent is reporting data, it could occur either just before or just after the agent reports the data. This lack of synchronization in time could therefore result in no metrics for that sample being reported in one harvest cycle and two in the next, where as the intent would be that there is one per harvest cycle. The solution to this is for the agent to pull custom metrics from the producer of the metrics as part of the process of reporting data to ensure they will be reported immediately and synchronised with the harvest cycle. The source of such metrics in this pull-style API is called a metric data source. Registering a data source The API function for registering a metric data source is: newrelic.agent.register_data_source(source, application=None, name=None, settings=None, **properties) Copy Because of varying requirements around how custom metrics may need to be produced, a number of different ways are available of implementing the data source. The simplest type of data source is one which is providing a gauge metric. That is one where some value at that particular point in time is relevant and what has happened historically doesn't matter. import psutil import os @newrelic.agent.data_source_generator(name='Memory Usage') def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) newrelic.agent.register_data_source(memory_metrics) Copy The decorator used here is: newrelic.agent.data_source_generator(name=None, **properties) Copy It is specifically for wrapping a generator function, or a function which otherwise returns an iterable when called. The name when registering a data source is optional. It exists mainly so that when logging errors the message can give a more recognisable name for the data source. If name isn't passed to register_data_source(), then any name associated with the actual data source using the decorator will be used instead, or the name of the function if the data source itself is not named. If an application object is not provided when registering a data source, then the data source will be automatically associated with all applications for which data is being reported by the agent in that process. If an application is provided, the data source will only be associated with that specific application. Whether a data source is registered against an application explicitly or is applied to all applications, the agent needs to first be registered for that application. This would normally happen if using a data source in an existing web application process which was being monitored. If however you are using a data source in a standalone program to report only custom metrics, you still need to ensure that the API call register_application() is used if necessary to force the registration of the agent for an application before any data will be collected. Initialization of a data source Although the decorator provides the ability to name a data source, the more important reason for the decorator is that it hides the complexity of a sequence of setup steps to get a data source running. The sequence of these steps is: The data source is initialized, with a dictionary holding any configuration being passed to it to set it up to run in a particular way. Upon being initialized, the data source returns a dictionary of properties describing the data source. This includes a reference to a factory function for creating a specific instance of the data source provider. An instance of the data source provider is then created for a specific consumer (application) by calling the factory. The factory function is passed a dictionary describing the environment in which it is running, including the name of the consumer. Rewriting the above example so as to not rely on the decorator, we would have: import os import psutil def memory_metrics_data_source(settings): def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) def memory_metrics_factory(environ): return memory_metrics properties = {} properties['name'] = 'Memory Usage' properties['factory'] = memory_metrics_factory return properties newrelic.agent.register_data_source(memory_metrics_data_source) Copy The purpose of the more complex underlying protocol is to provide sufficient hook points to properly initialize data sources and customise them based on that configuration and the specifics of the consumer. Instances of a data source Nothing more needed to be done in the prior example because gauge metrics, which don't care about the last time they were generated, were being returned. Where a metric reflects something happening over time, and therefore needs to retain some state, we need though an ability to be able to create an instance of the data source. The factory function therefore provides the ability for an instance of a data source to be created for each application against which metrics are being reported. There is allowance for one instance of the data source per application rather than one per process, because the start and end times for the harvest cycle for different applications may be different. If there was only one per process in this scenario and the metric had a connection to the duration of the harvest cycle, then the resulting metrics wouldn't be correct for each application. The ability is therefore provided for a data source instance to be application specific. Using nested functions as above, a data source which needs to maintain state could therefore be written as. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') def cpu_metrics_data_source(settings, environ): state = {} state['last_timestamp'] = time.time() state['times'] = os.times() def cpu_metrics(): now = time.time() new_times = os.times() elapsed_time = now - state['last_timestamp'] user_time = new_times[0] - state['times'][0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) state['last_timestamp'] = now state['times'] = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) return cpu_metrics newrelic.agent.register_data_source(cpu_metrics_data_source) Copy The decorator used here is: newrelic.agent.data_source_factory(name=None, **properties) Copy For this case the decorator is wrapping a factory function. Because the decorator is automatically returning the properties for the data source when required, the factory takes both the settings and the description of the environ it is being used in. Using nested functions is a bit magic and requires the code to use a dictionary on the stack of the outer function to hold the state. The alternative is to implement the data source as an actual class with the decorator applied to the class. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = time.time() self.times = os.times() def __call__(self): now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy Life cycle of a data source Although a data source could produce metrics at any time, the agent itself isn't always reporting metrics for an application. Specifically, it will only start collecting metrics and report them once the agent has managed to register itself with the data collector for a specific application. This distinction is important for data sources which generate metrics based on a time period. It would be required to only have metrics produced by a data source to cover the period back to the point at which registration occurred, or back to the last time that metrics were reported by the agent. If this isn't done, the reported metrics will not align and so it will not be possible to ensure that they correlate properly with metrics from tracking of web transactions or background tasks. For this reason, the factory for a data source will only be called to create an instance of the data source when registration for the application has completed and metrics collection started. This ensures that any reference timestamp will be correct. If the agent run for a particular application is terminated, due to a server side forced restart resulting from server side configuration changes, or because of successive failures to report data to the data collector, then the data source will be dropped. A new instance of the data source will then be created when the agent has been able to reregister itself again for the application. The correct cleanup of a data source in this case will depend on prompt destruction of the data source object when it is dropped. Because of object reference count cycles, this cannot be relied upon. It is also desirable to avoid a data source needing to add a __del__() method in order to trigger cleanup actions because of the problems that a __del__() method introduces in the way of actually preventing prompt destruction of the object. For this reason, if a data source needs more control over setup and shutdown, including perhaps being able to stay persistent in memory and not be dropped, yet suspend calculations for metrics, then it can provide start() and stop() methods when being implemented as a class instance. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = None self.times = None def start(self): self.last_timestamp = time.time() self.times = os.times() def stop(self): self.last_timestamp = None self.times = None def __call__(self): if self.times is None: return now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('CPU/User Time', user_time) yield ('CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy With the start() and stop() methods defined, the instance of the data source will not be destroyed at the termination of the agent run but kept around. The agent at this point is then expecting that the data source will itself deal with the suspension of any aggregation of metrics, dropping any accumulated metrics and ensure that when the agent reregisters the application with the data collector and calls start() again, only then would tracking for metrics be resumed. Configuring a data source Data sources may not always be bound to one specific information source. It may be necessary to register a data source against different underlying information sources from which metrics are generated. In this case distinct settings can be passed when registering a data source using the register_data_source() function. When using a data factory, these settings will then be available when the data source is being initialized. @newrelic.agent.data_source_factory() class HostMonitorDataSource(object): def __init__(self, settings, environ): self.hostname = settings['hostname'] def __call__(self): ... newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-1)', settings=dict(hostname='host-1')) newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-2)', settings=dict(hostname='host-2')) Copy If provision of settings is optional, the data source should only attempt to access settings if the settings option is not None. Even if supplied a dictionary, it should also cope with missing settings in the dictionary. Setup from configuration file Although the examples here showed the use of the register_data_source() API call, this would not be the normal way by which data sources would be registered. This is not the preferred way as it would require modifications to the application to import the module for the data source and register it. Instead, the primary way for defining and integrating data sources into an existing monitored web application would be to list them in the agent configuration file. This entails adding an additional section in the agent configuration file for each data source with prefix data-source:: [data-source:process-info] enabled = true function = samplers.process_info:process_info_data_source Copy If registering a data source from the agent configuration file, there should be no separate registration for the same data source being performed using the register_data_source() function occuring in your application code or in the module defining the data source. If there is, then two instances of the data source would end up being registerd. If needing to provide specific settings for a data source, this can be done by creating a separate section in the agent configuration file and referring to the section name in the settings value in the data source configuration. [data-source:host-monitor] enabled = true function = samplers.process_info:process_info_data_source name = Host Monitor (host-1) settings = host-monitor:host-1 [host-monitor:host-1] hostname = host-1 Copy As data source settings supplied via the configuration file will always be passed as string values, it is recommended that even when using register_data_source() with application code to register a data source and provide settings explicitly, that strings be used for setting values. The data source should then deal with the conversion to a different type such as a numeric value or list of values.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.96124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> custom metrics",
        "sections": "<em>Python</em> custom metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the <em>Python</em> <em>agent</em>. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application"
      },
      "id": "617dbf9f196a67adbbf7dfa4"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-14T20:50:50Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.79279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-12-14T20:52:22Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.21512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-12-14T20:50:50Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-12-14T20:52:22Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.21512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    },
    {
      "sections": [
        "Python custom metrics",
        "Important",
        "Charting custom metrics",
        "Push versus pull interfaces",
        "Recording a single metric",
        "Recording multiple metrics",
        "Naming of custom metrics",
        "Pre-aggregated metrics",
        "Custom metric data sources",
        "Registering a data source",
        "Initialization of a data source",
        "Instances of a data source",
        "Life cycle of a data source",
        "Configuring a data source",
        "Setup from configuration file"
      ],
      "title": "Python custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "f9a53099356096d43e66677875a5d909a2fbf340",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-custom-metrics/",
      "published_at": "2021-12-14T20:52:35Z",
      "updated_at": "2021-10-30T21:56:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the Python agent. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application. Recommendation: To avoid potential data problems, keep the total number of unique metrics introduced by custom metrics under 2000. Important Before using custom metrics, you must get the agent initialized and integrated with the target process. For instructions, see Python agent integration. Charting custom metrics To view custom metrics, query your data to search metrics and create customizable charts. Push versus pull interfaces The Python agent provides two different ways of recording custom metrics. The first is a push-style API where you can decide when to record a custom metric. The second is a pull-style API where you register a custom metric data source, and the agent polls your code for metrics once per harvest cycle. The pull-style API is important where you need to generate rate or utilization metrics over the period of the harvest cycle. This is because you can properly calculate the duration of the harvest cycle and also ensure that only one metric is recorded for the harvest cycle. Recording a single metric To record a single custom metric, the Python agent provides the function: newrelic.agent.record_custom_metric(name, value, application=None) Copy When called without an application object as newrelic.agent.record_custom_metric('Custom/Value', value) Copy then it must be called within the context of a transaction that is being monitored by the agent. This is because the current transaction will be looked up and the custom metrics will initially be attached to that transaction. So long as the transaction is not subsequently marked to be ignored, the custom metrics will then be aggregated with other metrics for the application the transaction is being reported to, when the transaction completes. If this API function is called outside of the context of a monitored transaction, such as in a background thread (which isn't being tracked as a background task), then the call does nothing and the data is discarded. In order to be able to record custom metrics in such a situation, it is necessary to supply the application object corresponding to the application against which the custom metrics should be recorded. application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metric('Custom/Value', value(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy In the case of recording custom metrics against the current transaction (by not supplying an application object), no thread locking is required at the time of the API call, as the custom metrics will be attached to the transaction object initially. It is only when the whole transaction is being recorded at completion that a thread lock needs to be acquired. This is the same lock though as needs to be acquired to merge all metrics from the transaction with the metric table for the current harvest cycle. So, no additional locking is required on top of what is already required. Where the API call is being supplied the application object however, it is necessary to acquire a lock for each call to record a custom metric. Recording metrics one at a time in this way for a large number of metrics may therefore have undue effects due to thread lock contention. Recording multiple metrics If you are recording multiple metrics in one go, to reduce the need for thread locking you can instead use the function: newrelic.agent.record_custom_metrics(metrics, application=None) Copy This works the same way as the record_custom_metric() call except that an iterable can be provided in place of the name and value arguments. The iterable can be a list, tuple or other iterable object, including a generator function. The iterable must return a tuple consisting of the name and value for the custom metric. import psutil import os def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) application = newrelic.agent.register_application() def report_custom_metrics(): while True: newrelic.agent.record_custom_metrics(memory_metrics(), application) time.sleep(60.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy When used with an application object, no matter how many custom metrics are being recorded, thread locking will only need to be performed once for each call. Naming of custom metrics All custom metrics reported by the Python agent should start with the prefix Custom/. This would typically be followed with a category name and label segment. If the Custom/ metric is not used, then the custom metrics may not be available for selection in the Data explorer. Pre-aggregated metrics When recording a set of metrics by passing an iterable over the set of available metrics, the same named metric may appear more than once. In this situation the agent would then aggregate the indvidual values into one sample. Although possible, if retaining and then later passing all the individual raw samples for a single metric in this way is not practical, then the source of the metrics can instead pre aggregate metrics and provide the resulting aggregrated data sample. Instead therefore of the value being a numerical value, a dictionary would be passed for the value. The fields within the dictionary would be: count total min max sum_of_squares An implementation of a helper class that you could use to perform aggregation for a single metric is: class Stats(dict): def __init__(self, count=0, total=0.0, min=0.0, max=0.0, sum_of_squares=0.0): self.count = count self.total = total self.min = min self.max = max self.sum_of_squares = sum_of_squares def __setattr__(self, name, value): self[name] = value def __getattr__(self, name): return self[name] def merge_stats(self, other): self.total += other.total self.min = self.count and min(self.min, other.min) or other.min self.max = max(self.max, other.max) self.sum_of_squares += other.sum_of_squares self.count += other.count def merge_value(self, value): self.total += value self.min = self.count and min(self.min, value) or value self.max = max(self.max, value) self.sum_of_squares += value ** 2 self.count += 1 Copy This class is itself a dictionary and so an instance of it can be passed directly as the value. This might then be used as: application = newrelic.agent.register_application() def sample_value(): return ... def report_custom_metrics(): count = 0 stats = Stats() while True: count += 1 stats.merge_value(sample_value()) if count % 60 == 0: newrelic.agent.record_custom_metric('Custom/Value', stats, application) stats = Stats() time.sleep(1.0) thread = threading.Thread(target=report_custom_metrics) thread.setDaemon(True) thread.start() Copy Custom metric data sources The record_custom_metric() and record_custom_metrics() API calls still require explicit action on your part to push custom metrics to the agent. Pushing data to the agent, especially if being done from a background thread and done on a 60 second interval, can be problematic though. This is because when the data is pushed it may not sync precisely with when the agent is reporting data back to the data collector. If a background thread was pre aggregating metrics over a 60 second period and then recording them, if that falls close to the time when the agent is reporting data, it could occur either just before or just after the agent reports the data. This lack of synchronization in time could therefore result in no metrics for that sample being reported in one harvest cycle and two in the next, where as the intent would be that there is one per harvest cycle. The solution to this is for the agent to pull custom metrics from the producer of the metrics as part of the process of reporting data to ensure they will be reported immediately and synchronised with the harvest cycle. The source of such metrics in this pull-style API is called a metric data source. Registering a data source The API function for registering a metric data source is: newrelic.agent.register_data_source(source, application=None, name=None, settings=None, **properties) Copy Because of varying requirements around how custom metrics may need to be produced, a number of different ways are available of implementing the data source. The simplest type of data source is one which is providing a gauge metric. That is one where some value at that particular point in time is relevant and what has happened historically doesn't matter. import psutil import os @newrelic.agent.data_source_generator(name='Memory Usage') def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) newrelic.agent.register_data_source(memory_metrics) Copy The decorator used here is: newrelic.agent.data_source_generator(name=None, **properties) Copy It is specifically for wrapping a generator function, or a function which otherwise returns an iterable when called. The name when registering a data source is optional. It exists mainly so that when logging errors the message can give a more recognisable name for the data source. If name isn't passed to register_data_source(), then any name associated with the actual data source using the decorator will be used instead, or the name of the function if the data source itself is not named. If an application object is not provided when registering a data source, then the data source will be automatically associated with all applications for which data is being reported by the agent in that process. If an application is provided, the data source will only be associated with that specific application. Whether a data source is registered against an application explicitly or is applied to all applications, the agent needs to first be registered for that application. This would normally happen if using a data source in an existing web application process which was being monitored. If however you are using a data source in a standalone program to report only custom metrics, you still need to ensure that the API call register_application() is used if necessary to force the registration of the agent for an application before any data will be collected. Initialization of a data source Although the decorator provides the ability to name a data source, the more important reason for the decorator is that it hides the complexity of a sequence of setup steps to get a data source running. The sequence of these steps is: The data source is initialized, with a dictionary holding any configuration being passed to it to set it up to run in a particular way. Upon being initialized, the data source returns a dictionary of properties describing the data source. This includes a reference to a factory function for creating a specific instance of the data source provider. An instance of the data source provider is then created for a specific consumer (application) by calling the factory. The factory function is passed a dictionary describing the environment in which it is running, including the name of the consumer. Rewriting the above example so as to not rely on the decorator, we would have: import os import psutil def memory_metrics_data_source(settings): def memory_metrics(): pid = os.getpid() p = psutil.Process(os.getpid()) m = p.get_memory_info() yield ('Custom/Memory/Physical', float(m.rss)/(1024*1024)) yield ('Custom/Memory/Virtual', float(m.vms)/(1024*1024)) def memory_metrics_factory(environ): return memory_metrics properties = {} properties['name'] = 'Memory Usage' properties['factory'] = memory_metrics_factory return properties newrelic.agent.register_data_source(memory_metrics_data_source) Copy The purpose of the more complex underlying protocol is to provide sufficient hook points to properly initialize data sources and customise them based on that configuration and the specifics of the consumer. Instances of a data source Nothing more needed to be done in the prior example because gauge metrics, which don't care about the last time they were generated, were being returned. Where a metric reflects something happening over time, and therefore needs to retain some state, we need though an ability to be able to create an instance of the data source. The factory function therefore provides the ability for an instance of a data source to be created for each application against which metrics are being reported. There is allowance for one instance of the data source per application rather than one per process, because the start and end times for the harvest cycle for different applications may be different. If there was only one per process in this scenario and the metric had a connection to the duration of the harvest cycle, then the resulting metrics wouldn't be correct for each application. The ability is therefore provided for a data source instance to be application specific. Using nested functions as above, a data source which needs to maintain state could therefore be written as. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') def cpu_metrics_data_source(settings, environ): state = {} state['last_timestamp'] = time.time() state['times'] = os.times() def cpu_metrics(): now = time.time() new_times = os.times() elapsed_time = now - state['last_timestamp'] user_time = new_times[0] - state['times'][0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) state['last_timestamp'] = now state['times'] = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) return cpu_metrics newrelic.agent.register_data_source(cpu_metrics_data_source) Copy The decorator used here is: newrelic.agent.data_source_factory(name=None, **properties) Copy For this case the decorator is wrapping a factory function. Because the decorator is automatically returning the properties for the data source when required, the factory takes both the settings and the description of the environ it is being used in. Using nested functions is a bit magic and requires the code to use a dictionary on the stack of the outer function to hold the state. The alternative is to implement the data source as an actual class with the decorator applied to the class. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = time.time() self.times = os.times() def __call__(self): now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('Custom/CPU/User Time', user_time) yield ('Custom/CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy Life cycle of a data source Although a data source could produce metrics at any time, the agent itself isn't always reporting metrics for an application. Specifically, it will only start collecting metrics and report them once the agent has managed to register itself with the data collector for a specific application. This distinction is important for data sources which generate metrics based on a time period. It would be required to only have metrics produced by a data source to cover the period back to the point at which registration occurred, or back to the last time that metrics were reported by the agent. If this isn't done, the reported metrics will not align and so it will not be possible to ensure that they correlate properly with metrics from tracking of web transactions or background tasks. For this reason, the factory for a data source will only be called to create an instance of the data source when registration for the application has completed and metrics collection started. This ensures that any reference timestamp will be correct. If the agent run for a particular application is terminated, due to a server side forced restart resulting from server side configuration changes, or because of successive failures to report data to the data collector, then the data source will be dropped. A new instance of the data source will then be created when the agent has been able to reregister itself again for the application. The correct cleanup of a data source in this case will depend on prompt destruction of the data source object when it is dropped. Because of object reference count cycles, this cannot be relied upon. It is also desirable to avoid a data source needing to add a __del__() method in order to trigger cleanup actions because of the problems that a __del__() method introduces in the way of actually preventing prompt destruction of the object. For this reason, if a data source needs more control over setup and shutdown, including perhaps being able to stay persistent in memory and not be dropped, yet suspend calculations for metrics, then it can provide start() and stop() methods when being implemented as a class instance. import os import time import multiprocessing @newrelic.agent.data_source_factory(name='CPU Usage') class CPUMetricsDataSource(object): def __init__(self, settings, environ): self.last_timestamp = None self.times = None def start(self): self.last_timestamp = time.time() self.times = os.times() def stop(self): self.last_timestamp = None self.times = None def __call__(self): if self.times is None: return now = time.time() new_times = os.times() elapsed_time = now - self.last_timestamp user_time = new_times[0] - self.times[0] utilization = user_time / (elapsed_time*multiprocessing.cpu_count()) self.last_timestamp = now self.times = new_times yield ('CPU/User Time', user_time) yield ('CPU/User/Utilization', utilization) newrelic.agent.register_data_source(CPUMetricsDataSource) Copy With the start() and stop() methods defined, the instance of the data source will not be destroyed at the termination of the agent run but kept around. The agent at this point is then expecting that the data source will itself deal with the suspension of any aggregation of metrics, dropping any accumulated metrics and ensure that when the agent reregisters the application with the data collector and calls start() again, only then would tracking for metrics be resumed. Configuring a data source Data sources may not always be bound to one specific information source. It may be necessary to register a data source against different underlying information sources from which metrics are generated. In this case distinct settings can be passed when registering a data source using the register_data_source() function. When using a data factory, these settings will then be available when the data source is being initialized. @newrelic.agent.data_source_factory() class HostMonitorDataSource(object): def __init__(self, settings, environ): self.hostname = settings['hostname'] def __call__(self): ... newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-1)', settings=dict(hostname='host-1')) newrelic.agent.register_data_source(HostMonitorDataSource, name='Host Monitor (host-2)', settings=dict(hostname='host-2')) Copy If provision of settings is optional, the data source should only attempt to access settings if the settings option is not None. Even if supplied a dictionary, it should also cope with missing settings in the dictionary. Setup from configuration file Although the examples here showed the use of the register_data_source() API call, this would not be the normal way by which data sources would be registered. This is not the preferred way as it would require modifications to the application to import the module for the data source and register it. Instead, the primary way for defining and integrating data sources into an existing monitored web application would be to list them in the agent configuration file. This entails adding an additional section in the agent configuration file for each data source with prefix data-source:: [data-source:process-info] enabled = true function = samplers.process_info:process_info_data_source Copy If registering a data source from the agent configuration file, there should be no separate registration for the same data source being performed using the register_data_source() function occuring in your application code or in the module defining the data source. If there is, then two instances of the data source would end up being registerd. If needing to provide specific settings for a data source, this can be done by creating a separate section in the agent configuration file and referring to the section name in the settings value in the data source configuration. [data-source:host-monitor] enabled = true function = samplers.process_info:process_info_data_source name = Host Monitor (host-1) settings = host-monitor:host-1 [host-monitor:host-1] hostname = host-1 Copy As data source settings supplied via the configuration file will always be passed as string values, it is recommended that even when using register_data_source() with application code to register a data source and provide settings explicitly, that strings be used for setting values. The data source should then deal with the conversion to a different type such as a numeric value or list of values.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.96124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> custom metrics",
        "sections": "<em>Python</em> custom metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "Custom metrics allow you to record arbitrary metrics using APIs provided by the <em>Python</em> <em>agent</em>. These may be used to record metrics related to the business functions implemented by your web application, or may be additional metrics used to evaluate the performance of the web application"
      },
      "id": "617dbf9f196a67adbbf7dfa4"
    }
  ]
}