{
  "/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2022-01-12T10:53:00Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2022-01-12T10:53:01Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2022-01-12T10:53:41Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelicissampled": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2022-01-12T10:55:29Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2022-01-12T10:53:00Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2022-01-12T10:53:01Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.77285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/agent-stops-working-after-updating-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.451485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/checking-loaded-configuration-files-directory": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.451485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/data-stops-reporting-while-using-selinux": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/data-stops-reporting": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/determine-permissions-requirements-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/first-php-transaction-not-reported": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/generating-logs-troubleshooting-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/ini-settings-not-taking-effect-immediately": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/missing-php-module": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php": [
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "b210c9816796445b7e39a1e8194b624993a96ed6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2022-01-12T10:47:50Z",
      "updated_at": "2022-01-04T04:21:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Don't use the /tmp folder. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.09337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar"
      },
      "id": "617e9d2628ccbc24e17ff001"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/php-agent-not-reporting-errors": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.068985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "b210c9816796445b7e39a1e8194b624993a96ed6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2022-01-12T10:47:50Z",
      "updated_at": "2022-01-04T04:21:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Don't use the /tmp folder. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.093346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar"
      },
      "id": "617e9d2628ccbc24e17ff001"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/protocol-mismatch-error": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation: Tar file",
        "Download the tar distribution",
        "Tip",
        "Install or update"
      ],
      "title": "PHP agent installation: Tar file",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "b210c9816796445b7e39a1e8194b624993a96ed6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-tar-file/",
      "published_at": "2022-01-12T10:47:50Z",
      "updated_at": "2022-01-04T04:21:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install New Relic's PHP agent from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar archives do not require any special repository setup. All you need to do is download the archive and follow these instructions. Download the appropriate tar distribution file from download.newrelic.com/php_agent/release/. For example: For FreeBSD, download newrelic-php5-X.X.X.X-freebsd.tar.gz. For Alpine Linux, download newrelic-php5-X.X.X.X-linux-musl.tar.gz. Tip The package name for the New Relic's PHP agent is newrelic-php5. Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Install or update With tar file installation, the steps for first time installation and for updating are the same. Replace X.X.X.X with the correct New Relic version. To install or update the agent: Download the appropriate tar file from the New Relic website, and save it to a local disk in a convenient location. Don't use the /tmp folder. Decompress and extract the archive: gzip -dc newrelic-php5-X.X.X.X-OS.tar.gz | tar xf - Copy Change to the newly created directory: cd newrelic-php5-X.X.X.X-OS Copy Run the installation script: ./newrelic-install Copy Change the default application name to a meaningful name. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data, then check your app's performance in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.09332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "sections": "<em>PHP</em> <em>agent</em> installation: Tar file",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can install New Relic&#x27;s <em>PHP</em> <em>agent</em> from compressed tar files on any supported platform. However, for Redhat or CentOS it is more common to use the RPM package. For Ubuntu or Debian it is more common to use the Debian package. Download the tar distribution Unlike other installation options, tar"
      },
      "id": "617e9d2628ccbc24e17ff001"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/symfony44-performance": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.45496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 82.633835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.56883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/threaded-apache-worker-mpms": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/transactions-named-indexphp-or-unknown": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/troubleshoot-php-agent-instance-count": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/uninstrumented-time-traces": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/using-phpinfo-verify-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.45146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/verifying-php-daemon": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.451454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/php-agent/troubleshooting/why-when-restart-your-web-server-php": [
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "02be568bf4a4e839334a8ae4013c4132c6321a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2022-01-12T10:57:49Z",
      "updated_at": "2021-10-31T14:31:16Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "617ea8b428ccbc73cc80084e"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.451454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "Submitting troubleshooting results (PHP)",
        "Problem",
        "Solution"
      ],
      "title": "Submitting troubleshooting results (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "82832165041335d224ff51420a7379f680ab344d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php/",
      "published_at": "2022-01-12T10:58:25Z",
      "updated_at": "2021-10-30T21:13:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You continue to have problems with installing the New Relic PHP agent. Solution If you continue to have problems with your New Relic PHP installation after following the troubleshooting tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer, provide the following information: How far have you progressed in the installation process Which installation method you are using A copy your newrelic.cfg file (if any) A link to your phpinfo page, or the output of phpinfo saved as an HTML file. To create phpinfo, create a .php webpage containing just: <?php phpinfo(); ?> Copy Your agent and daemon log files",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "sections": "Submitting <em>troubleshooting</em> results (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You continue to have problems with installing the New Relic <em>PHP</em> <em>agent</em>. Solution If you continue to have problems with your New Relic <em>PHP</em> installation after following the <em>troubleshooting</em> tips, get support at support.newrelic.com. When working with a New Relic Technical Support engineer"
      },
      "id": "617db584196a6769c5f7bfc7"
    }
  ],
  "/docs/apm/agents/python-agent/async-instrumentation/asyncpg": [
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "0b8cb6921769a1f599b29f66145cbdf738df5d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2022-01-12T16:44:23Z",
      "updated_at": "2021-10-23T18:37:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.25087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db82c196a6788d7f7ce13"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "ea90750938d5d871627358abb21716bed420515f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2022-01-12T16:26:45Z",
      "updated_at": "2021-10-23T23:28:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.05203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "617db5fd28ccbc8e987fe5ab"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.11365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/async-instrumentation/django-asgi-mode": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "778ab8d9a1029be25202cc21badc018a452dabab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2022-01-12T16:26:44Z",
      "updated_at": "2021-10-23T23:29:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.95552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "617db5ffe7b9d221e3c04b9d"
    },
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "0b8cb6921769a1f599b29f66145cbdf738df5d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2022-01-12T16:44:23Z",
      "updated_at": "2021-10-23T18:37:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.25087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db82c196a6788d7f7ce13"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.11365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/enabling-disabling-attributes-python": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.67511,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.31404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional <em>attributes</em> to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.39832,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/python-agent-attributes": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.67511,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.31404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional <em>attributes</em> to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.39832,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/python-agent/attributes/python-attribute-examples": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.67494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.3139,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional <em>attributes</em> to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.39825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/python-agent/back-end-services/python-agent-celery": [
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.652954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.62616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>background_task</em> (<em>Python</em> <em>agent</em> API)",
        "sections": "<em>background_task</em> (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/configuration/python-agent-configuration": [
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.33182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.30942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.652954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.86943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". event_harvest_config.harvest_limits.<em>custom</em>_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_<em>CUSTOM</em>_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for <em>custom</em> events per minute sent by an instance of the <em>Python</em> <em>agent</em> to New Relic. <em>Custom</em> events are created through the <em>Python</em>"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Important",
        "Tracing blocks of code",
        "Naming transactions",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers Important This procedure does not work for Rails version 7 or higher. For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.940186,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>custom</em> <em>instrumentation</em>",
        "sections": "Ruby <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": " information, see Monitoring Ruby background processes and daemons. Advanced <em>custom</em> <em>instrumentation</em> When tracing code not automatically instrumented by the <em>agent</em>, the standard method tracers will usually be enough. However, sometimes you need to <em>instrument</em> something more complex than a single method call"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.8717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". event_harvest_config.harvest_limits.<em>custom</em>_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_<em>CUSTOM</em>_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for <em>custom</em> events per minute sent by an instance of the <em>Python</em> <em>agent</em> to New Relic. <em>Custom</em> events are created through the <em>Python</em>"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Important",
        "Tracing blocks of code",
        "Naming transactions",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers Important This procedure does not work for Rails version 7 or higher. For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.94205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>custom</em> <em>instrumentation</em>",
        "sections": "Ruby <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": " information, see Monitoring Ruby background processes and daemons. Advanced <em>custom</em> <em>instrumentation</em> When tracing code not automatically instrumented by the <em>agent</em>, the standard method tracers will usually be enough. However, sometimes you need to <em>instrument</em> something more complex than a single method call"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/apm-agent-security-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.74849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.942474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.74849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.942474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/instrumented-python-packages": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.74841,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.94237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.94237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8721,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/install-python-agent-gae-flexible-environment": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.27733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.15129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.454575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-heroku": [
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.15129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.454575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.11299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-openshift": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.27733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.454575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.112885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-stackato": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.27733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.15128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.112885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/hosting-services/python-agent-webfaction": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "08e081695da775408f503070290e01086816d709",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:17:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.27733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "617db66f196a67ed74f7d200"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "41651632900c3b2bae201b3ca02418fa0f99a8be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-30T21:18:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.15128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "617db6a1e7b9d2ba90c065d3"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "945c3dba4346a3772086479270d63dcd0e747a30",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2022-01-12T16:29:27Z",
      "updated_at": "2021-10-23T23:41:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.454575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "617db6a264441f3722fbeca8"
    }
  ],
  "/docs/apm/agents/python-agent/installation/advanced-install-new-relic-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.7863,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.871796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.65234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/install-python-agent-docker": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.65225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/python-agent-admin-script-advanced-usage": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.65225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/python-agent-advanced-integration": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.652145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/standard-python-agent-install": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.652145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/uninstall-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.652145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/installation/update-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.7861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "<em>Install</em> the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Create config file. Integrate the <em>Python</em> <em>agent</em> with your application. Read the Quick Start guide Add <em>Python</em> data Monitor non-web scripts, background tasks, and functions The <em>Python</em> <em>agent</em> also lets you monitor non-web scripts, worker processes, tasks, and functions. The <em>installation</em> process"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.8715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.65204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/acceptdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25235,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.0017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/acceptdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25235,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.0017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomparameter-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25235,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.0017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomparameters-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/addcustomspanattribute-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/application-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/applicationsettings-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/asgiapplication-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30719,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30719,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "778ab8d9a1029be25202cc21badc018a452dabab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2022-01-12T16:26:44Z",
      "updated_at": "2021-10-23T23:29:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.512184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program <em>python</em> path_to_app Copy Using the <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set"
      },
      "id": "617db5ffe7b9d221e3c04b9d"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/callablename-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/capturerequestparams-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/createdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/currenttransaction-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datasourcegenerator-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2511,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/datastoretrace-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2511,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/endoftransaction-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.00166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/externaltrace-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/functiontrace-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/getlinkingmetadata-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/globalsettings-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30573,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/guide-using-python-agent-api": [
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.610115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Metrics and stats in the Ruby <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic Ruby <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.61,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic Ruby <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the Ruby <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.60547,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " family of <em>API</em> calls from any point within your transaction: NewRelic::<em>Agent</em>.ignore_transaction NewRelic::<em>Agent</em>.ignore_apdex NewRelic::<em>Agent</em>.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called"
      },
      "id": "617e9647e7b9d26088c044a4"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/ignoretransaction-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/initialize-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.25005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/insertdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/messagetrace-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/messagetransaction-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3051,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/noticeerror-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3051,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api": [
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "778ab8d9a1029be25202cc21badc018a452dabab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2022-01-12T16:26:44Z",
      "updated_at": "2021-10-23T23:29:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.50653,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program <em>python</em> path_to_app Copy Using the <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set"
      },
      "id": "617db5ffe7b9d221e3c04b9d"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/python-agent-api-different-call-forms": [
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.35272,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.93967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the <em>form</em> of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SCIM",
        "Step 2. Set up OneLogin's New Relic app",
        "Step 3. Configure SCIM/SSO application",
        "Fill in the configuration form",
        "Fill in the rules form",
        "A rule that only uses actions",
        "Fill in the provisioning form",
        "Tip",
        "Fill in the Parameters form",
        "Save your changes",
        "Step 4. Assign users",
        "Step 5. Set your users' user type",
        "Step 6. Assign access grants",
        "Step 7. Configure SAML SSO"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2022-01-12T01:51:25Z",
      "updated_at": "2022-01-12T01:51:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read the automated user management requirements. Note that these instructions require going back and forth between your identity provider and New Relic. Step 1. Create authentication domain and enable SCIM For how to get to the New Relic authentication domain UI, see Authentication domain UI. If you don't already have one, create a new authentication domain for your SCIM-provisioned users by clicking + Add new. For that authentication domain, under Source of users, select SCIM. Copy and save the API token for later use. Note that this will be shown only once. Step 2. Set up OneLogin's New Relic app Next, you'll be setting up OneLogin's New Relic SAML/SCIM app. To set this up: Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by organization\" (not \"New Relic by account\") and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Step 3. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Fill in the configuration form In the left pane, select Configuration and complete the following: Get the authentication domain ID (top of New Relic's authentication domain UI and SCIM bearer token (in authentication domain UI as \"SAML 2.0 endpoint) and input them into the appropriate fields in the OneLogin app. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Step 4. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user: Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. Important: Updating users' time zones is important, as charts and other user assets display times. Default is UMT. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. Step 5. Set your users' user type When your users are provisioned in New Relic, you're able to see them in the User management UI. If you're adding users to New Relic via SCIM but not managing their user type via SCIM, they start out as basic users. To convert users to full platform users, you have two options: Use the User management UI to edit users. Configure the OneLogin app to manage user type. Step 6. Assign access grants Once these steps are completed, you should be able to see your users in New Relic by going to the User management UI. Now that your users are present in New Relic, you must grant them access to specific roles on specific accounts. If this is not done, your users don't yet have access to New Relic. To learn how to do this, see: How access grants work The user management tutorial Step 7. Configure SAML SSO To enable SAML SSO for your users, see the SAML instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.62778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Fill in the configuration <em>form</em>",
        "body": ". Configure SCIM&#x2F;SSO application Configuration for the New Relic SCIM&#x2F;SSO application is split across several <em>forms</em>. This section describes the <em>different</em> <em>forms</em> that need to be configured. From the New Relic by organization application page, fill in the following <em>forms</em>: Fill in the configuration <em>form</em>"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustomevent-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.3049,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30469,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordcustommetrics-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30469,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/recordexception-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30447,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/registerapplication-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30447,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/registerdatasource-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/setbackgroundtask-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.2486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.30365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.24817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "background_task (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.99554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.08081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9ccca1055222837ebead1f8ec5e23926089ae6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2022-01-12T16:42:23Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.69763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "617dbf9f28ccbcf0c97ffc13"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.5306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.08081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.5306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.08081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.5306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9ccca1055222837ebead1f8ec5e23926089ae6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2022-01-12T16:42:23Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.69763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "617dbf9f28ccbcf0c97ffc13"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.5306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.08081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ]
}